{"version":3,"file":"main.js","sources":["webpack:///webpack/bootstrap","webpack:///./app.js","webpack:///./config/passport.js","webpack:///./controllers/contact.js","webpack:///./controllers/expense.js","webpack:///./controllers/home.js","webpack:///./controllers/import.js","webpack:///./controllers/travel.js","webpack:///./controllers/user.js","webpack:///./lib/constants.js","webpack:///./lib/globals.js","webpack:///./models/Currency.js","webpack:///./models/Expense.js","webpack:///./models/Rate.js","webpack:///./models/Travel.js","webpack:///./models/User.js","webpack:///./utils/getRates.js","webpack:///./utils/hbsHelpers/hbsHelpers.js","webpack:///./utils/hbsHelpers/yearsAccordion.js","webpack:///./utils/myErrors.js","webpack:///./utils/postImport.js","webpack:///./utils/travelExpensesToPDF.js","webpack:///./utils/travelsTotalToPDF.js","webpack:///./utils/updateExpensesToMatchTravelRangeDates.js","webpack:///./utils/utils.js","webpack:///external \"@babel/polyfill\"","webpack:///external \"axios\"","webpack:///external \"bcrypt-nodejs\"","webpack:///external \"body-parser\"","webpack:///external \"chalk\"","webpack:///external \"compression\"","webpack:///external \"connect-mongo\"","webpack:///external \"crypto\"","webpack:///external \"dotenv\"","webpack:///external \"errorhandler\"","webpack:///external \"express\"","webpack:///external \"express-flash\"","webpack:///external \"express-formidable\"","webpack:///external \"express-hbs\"","webpack:///external \"express-session\"","webpack:///external \"express-validator\"","webpack:///external \"fs\"","webpack:///external \"full-icu\"","webpack:///external \"lodash\"","webpack:///external \"lusca\"","webpack:///external \"method-override\"","webpack:///external \"moment\"","webpack:///external \"mongoose\"","webpack:///external \"morgan\"","webpack:///external \"multer\"","webpack:///external \"node-mailjet\"","webpack:///external \"node-sass-middleware\"","webpack:///external \"node-schedule\"","webpack:///external \"nodemailer\"","webpack:///external \"papaparse\"","webpack:///external \"passport\"","webpack:///external \"passport-google-oauth\"","webpack:///external \"passport-local\"","webpack:///external \"passport-oauth\"","webpack:///external \"path\"","webpack:///external \"pdfmake\"","webpack:///external \"request\"","webpack:///external \"util\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"public/js/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/* eslint-disable no-unused-vars */\r\n// jshint esversion: 6\r\n/**\r\n * Module dependencies.\r\n */\r\nconst express = require('express');\r\nconst compression = require('compression');\r\nconst session = require('express-session');\r\nconst bodyParser = require('body-parser');\r\nconst logger = require('morgan');\r\nconst chalk = require('chalk');\r\nconst errorHandler = require('errorhandler');\r\nconst lusca = require('lusca');\r\nconst dotenv = require('dotenv');\r\nconst MongoStore = require('connect-mongo')(session);\r\nconst flash = require('express-flash');\r\nconst path = require('path');\r\nconst mongoose = require('mongoose');\r\nconst passport = require('passport');\r\nconst expressValidator = require('express-validator');\r\n\r\nconst sass = require('node-sass-middleware');\r\nconst multer = require('multer');\r\n\r\nconst formidable = require('express-formidable');\r\nconst expressHbs = require('express-hbs');\r\nconst methodOverride = require('method-override');\r\n\r\nrequire('./utils/hbsHelpers/hbsHelpers');\r\nrequire('./utils/hbsHelpers/yearsAccordion');\r\nrequire('full-icu');\r\nconst getRates = require('./utils/getRates');\r\n\r\nconst Travel = require('./models/Travel');\r\nconst Expense = require('./models/Expense');\r\nconst Rate = require('./models/Rate');\r\nconst myErrors = require('./utils/myErrors');\r\n\r\nconst { importFileError } = myErrors;\r\n\r\nconst upload = multer({ dest: path.join(__dirname, 'uploads') });\r\n\r\n\r\n/**\r\n  * Added by me\r\n  * Catch uncaught errors\r\n  */\r\nprocess.on('uncaughtException', (err) => {\r\n  console.error('There was an uncaught error', err);\r\n  process.exit(1); // mandatory (as per the Node docs)\r\n});\r\n\r\n\r\n/**\r\n * Load environment variables from .env file, where API keys and passwords are configured.\r\n */\r\ndotenv.config({ path: '.env' });\r\n\r\n/**\r\n * Controllers (route handlers).\r\n */\r\nconst homeController = require('./controllers/home');\r\nconst userController = require('./controllers/user');\r\nconst contactController = require('./controllers/contact');\r\nconst travelController = require('./controllers/travel');\r\nconst expenseController = require('./controllers/expense');\r\nconst importController = require('./controllers/import');\r\n\r\n/**\r\n * API keys and Passport configuration.\r\n */\r\nconst passportConfig = require('./config/passport');\r\n\r\n/**\r\n * Create Express server.\r\n */\r\nconst app = express();\r\n\r\n/**\r\n * Connect to MongoDB.\r\n * added useUnifiedTopology: true 12 sep '19'\r\n */\r\nmongoose.set('useFindAndModify', false);\r\nmongoose.set('useCreateIndex', true);\r\nmongoose.set('useNewUrlParser', true);\r\nmongoose.set('useUnifiedTopology', true);\r\nmongoose.connect(process.env.MONGODB_URI);\r\nmongoose.connection.on('error', (err) => {\r\n  console.error(err);\r\n  console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('âœ—'));\r\n  process.exit();\r\n});\r\n\r\n/**\r\n * Express configuration.\r\n */\r\napp.set('host', process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0');\r\napp.set('port', process.env.PORT || process.env.OPENSHIFT_NODEJS_PORT || 8080);\r\napp.set('views', path.join(__dirname, './views'));\r\n\r\napp.engine('hbs', expressHbs.express4({\r\n  layoutsDir: path.join(__dirname, './views/layouts'),\r\n  partialsDir: [path.join(__dirname, './views/partials'), path.join(__dirname, './views/account'), path.join(__dirname, './views/travels')],\r\n  defaultView: 'layout',\r\n  extname: '.hbs'\r\n}));\r\n\r\napp.set('view engine', '.hbs');\r\n\r\napp.use(compression());\r\napp.use(sass({\r\n  src: path.join(__dirname, 'public'),\r\n  dest: path.join(__dirname, 'public')\r\n}));\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(expressValidator()); // works with express-validator@5.3.1\r\napp.use(session({\r\n  resave: true,\r\n  saveUninitialized: true,\r\n  secret: process.env.SESSION_SECRET,\r\n  cookie: { maxAge: 1209600000 }, // two weeks in milliseconds\r\n  store: new MongoStore({\r\n    url: process.env.MONGODB_URI,\r\n    autoReconnect: true,\r\n  })\r\n}));\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\napp.use(flash());\r\n\r\n/**\r\n   * Added by my\r\n   * express-formidable\r\n   */\r\napp.use('/import', formidable({\r\n  encoding: 'utf-8',\r\n  uploadDir: path.join(__dirname, '/uploads'),\r\n  keepExtensions: true\r\n}));\r\napp.use('/import', (req, res, next) => {\r\n  if (Object.keys(req.body).length === 0 && req.fields) {\r\n    req.body = req.fields;\r\n  }\r\n  next();\r\n});\r\n\r\napp.use((req, res, next) => {\r\n  if (req.path === '/api/upload') {\r\n    next();\r\n  } else {\r\n    lusca.csrf()(req, res, next);\r\n  }\r\n});\r\napp.use(lusca.xframe('SAMEORIGIN'));\r\napp.use(lusca.xssProtection(true));\r\napp.disable('x-powered-by');\r\napp.use((req, res, next) => {\r\n  res.locals.user = req.user;\r\n  next();\r\n});\r\napp.use((req, res, next) => {\r\n  // After successful login, redirect back to the intended page\r\n  if (!req.user\r\n    && req.path !== '/login'\r\n    && req.path !== '/signup'\r\n    && !req.path.match(/^\\/auth/)\r\n    && !req.path.match(/\\./)) {\r\n    req.session.returnTo = req.originalUrl;\r\n  } else if (req.user\r\n    && (req.path === '/account' || req.path.match(/^\\/api/))) {\r\n    req.session.returnTo = req.originalUrl;\r\n  }\r\n  next();\r\n});\r\n\r\napp.use('/', express.static(path.join(__dirname, 'public'), { maxAge: 31557600000 }));\r\napp.use('/js/lib', express.static(path.join(__dirname, 'node_modules/popper.js/dist/umd'), { maxAge: 31557600000 }));\r\napp.use('/js/lib', express.static(path.join(__dirname, 'node_modules/bootstrap/dist/js'), { maxAge: 31557600000 }));\r\napp.use('/js/lib', express.static(path.join(__dirname, 'node_modules/jquery/dist'), { maxAge: 31557600000 }));\r\napp.use('/webfonts', express.static(path.join(__dirname, 'node_modules/@fortawesome/fontawesome-free/webfonts'), { maxAge: 31557600000 }));\r\n\r\n/**\r\n  * Added by me\r\n  * To overide form methodOverride\r\n  * Must be placed after: app.use(bodyParser.urlencoded())\r\n  */\r\n\r\napp.use(methodOverride((req, res) => {\r\n  if (req.body && typeof req.body === 'object' && '_method' in req.body) {\r\n    // look in urlencoded POST bodies and delete it\r\n    const method = req.body._method;\r\n    delete req.body._method;\r\n    return method;\r\n  }\r\n}));\r\n\r\n/**\r\n  * Added by me\r\n  * Save to res.locals.travels all user travel, sorted by dateFrom ascending\r\n  */\r\napp.use('/import', async (req, res, next) => {\r\n  try {\r\n    const travels = await Travel.find({ _user: req.user._id, _id: { $in: req.user.travels } })\r\n      .populate({\r\n        path: 'expenses',\r\n        populate: { path: 'curRate' }\r\n      }).sort({ dateFrom: 1 });\r\n    res.locals.travels = travels;\r\n    next();\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\n/*\r\n * Add by me\r\n * Save to res.locals.expense current expense\r\n */\r\napp.use('/travels/:id/expenses/:id', async (req, res, next) => {\r\n  if ((!res.locals.expense || res.locals.expense._id !== req.params.id) && req.params.id !== 'new') {\r\n    try {\r\n      const baseUrl = req.baseUrl.split('/');\r\n      const travelId = baseUrl[2];\r\n      const travel = await Travel.findById(travelId).populate({\r\n        path: 'expenses',\r\n        populate: { path: 'curRate' }\r\n      });\r\n      const expense = await Expense.findById(req.params.id).populate({\r\n        path: 'curRate'\r\n      });\r\n      let rates = await Rate.findRatesOnDate(travel, (err, result) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      });\r\n\r\n      if (rates.length === 0) {\r\n        rates = await Rate.findRateBeforeOrAfterDate(travel, (err, result) => {\r\n          if (err) {\r\n            throw new Error(err);\r\n          }\r\n        });\r\n      }\r\n      res.locals.expense = expense;\r\n      res.locals.rates = rates;\r\n      next();\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\n/**\r\n  * Added by me\r\n  * Save to res.locals.travels current travel\r\n  */\r\napp.use('/travels/:id', async (req, res, next) => {\r\n  if ((!res.locals.travel || res.locals.travel._id !== req.params.id) && req.params.id !== 'new' && req.params.id !== 'total_pdf') {\r\n    try {\r\n      const travel = await Travel.findById(req.params.id).populate({\r\n        path: 'expenses',\r\n        populate: { path: 'curRate' }\r\n      });\r\n      let rates = await Rate.findRatesOnDate(travel, (err, result) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n      });\r\n\r\n      if (rates.length === 0) {\r\n        rates = await Rate.findRateBeforeOrAfterDate(travel, (err, result) => {\r\n          if (err) {\r\n            throw new Error(err);\r\n          }\r\n        });\r\n      }\r\n      res.locals.travel = travel;\r\n      res.locals.rates = rates;\r\n      next();\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\n\r\n/**\r\n  * Added by me\r\n  * Create job to get rates - every day, every 1 minute of the hour\r\n  * Get rates from fixer.io api with base: EUR and save to database.\r\n  */\r\ngetRates();\r\n\r\n/**\r\n * Primary app routes.\r\n */\r\napp.get('/', homeController.index);\r\napp.get('/login', userController.getLogin);\r\napp.post('/login', userController.postLogin);\r\napp.get('/logout', userController.logout);\r\napp.get('/forgot', userController.getForgot);\r\napp.post('/forgot', userController.postForgot);\r\napp.get('/reset/:token', userController.getReset);\r\napp.post('/reset/:token', userController.postReset);\r\napp.get('/signup', userController.getSignup);\r\napp.post('/signup', userController.postSignup);\r\napp.get('/contact', contactController.getContact);\r\napp.post('/contact', contactController.postContact);\r\napp.get('/account', passportConfig.isAuthenticated, userController.getAccount);\r\napp.post('/account/profile', passportConfig.isAuthenticated, userController.postUpdateProfile);\r\napp.post('/account/password', passportConfig.isAuthenticated, userController.postUpdatePassword);\r\napp.post('/account/delete', passportConfig.isAuthenticated, userController.postDeleteAccount);\r\napp.get('/account/unlink/:provider', passportConfig.isAuthenticated, userController.getOauthUnlink);\r\n\r\napp.get('/travels', passportConfig.isAuthenticated, travelController.getTravels);\r\napp.get('/travels/new', passportConfig.isAuthenticated, travelController.getNewTravel);\r\napp.post('/travels/new', passportConfig.isAuthenticated, travelController.postNewTravel);\r\napp.get('/travels/total_pdf', passportConfig.isAuthenticated, travelController.getTravelsTotalPDF);\r\napp.get('/travels/:id', passportConfig.isAuthenticated, travelController.getTravel);\r\napp.delete('/travels/:id', passportConfig.isAuthenticated, travelController.deleteTravel);\r\napp.patch('/travels/:id', passportConfig.isAuthenticated, travelController.updateTravel);\r\napp.post('/travels/:id/expenses/new', passportConfig.isAuthenticated, expenseController.postNewExpense);\r\napp.get('/travels/:id/expenses/:id', passportConfig.isAuthenticated, expenseController.getExpense);\r\napp.patch('/travels/:id/expenses/:id', passportConfig.isAuthenticated, expenseController.updateExpense);\r\napp.delete('/travels/:id/expenses/:id', passportConfig.isAuthenticated, expenseController.deleteExpense);\r\napp.get('/import', passportConfig.isAuthenticated, importController.getImport);\r\napp.post('/import', passportConfig.isAuthenticated, importController.postImport);\r\napp.get('/travels/:id/pdf', passportConfig.isAuthenticated, travelController.getTravelExpensesPDF);\r\n\r\n/**\r\n * OAuth authentication routes. (Sign in)\r\n */\r\napp.get('/auth/google', passport.authenticate('google', { scope: 'profile email' }));\r\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/login' }), (req, res) => {\r\n  res.redirect(req.session.returnTo || '/');\r\n});\r\n\r\n/**\r\n * Error Handler.\r\n */\r\nif (process.env.NODE_ENV === 'development') {\r\n  // only use in development\r\n  app.use(errorHandler({\r\n    log: (err, str, req, res) => {\r\n      if (err instanceof importFileError || err instanceof mongoose.CastError) {\r\n        console.log(str);\r\n      } else {\r\n        console.log(err);\r\n      }\r\n    }\r\n  }));\r\n} else {\r\n  app.use((err, req, res, next) => {\r\n    if (err instanceof importFileError) {\r\n      console.log(err.stack);\r\n      res.status(400);\r\n      res.redirect(req.path);\r\n    } else if (err instanceof mongoose.CastError) {\r\n      console.log(err.stack);\r\n      res.status(400);\r\n      res.redirect('/travels');\r\n    } else {\r\n      console.log(err);\r\n      res.status(500).render('error', {\r\n        layout: 'errorLayout',\r\n        title: 'Error'\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Start Express server.\r\n */\r\napp.listen(app.get('port'), () => {\r\n  console.log('%s App is running at http://localhost:%d in %s mode', chalk.green('âœ“'), app.get('port'), app.get('env'));\r\n  console.log('  Press CTRL-C to stop\\n');\r\n});\r\n\r\nmodule.exports = app;\r\n","const passport = require('passport');\r\nconst request = require('request');\r\n\r\nconst { Strategy: LocalStrategy } = require('passport-local');\r\nconst { OAuth2Strategy: GoogleStrategy } = require('passport-google-oauth');\r\nconst { OAuthStrategy } = require('passport-oauth');\r\nconst { OAuth2Strategy } = require('passport-oauth');\r\n\r\nconst User = require('../models/User');\r\n\r\n/**\r\n * Determines which data of the user object should be stored in the session.\r\n * The result of the serializeUser method is attached to the session as req.session.passport.user = {}.\r\n * In this case req.session.passport.user = {id: user.id)\r\n */\r\npassport.serializeUser((user, done) => {\r\n  done(null, user.id);\r\n});\r\n\r\n/**\r\n * The first argument of deserializeUser corresponds to the key of the user object that was given to the done function (see 1.).\r\n * So your whole object is retrieved with help of that key.\r\n * That key here is the user id (key can be any key of the user object i.e. name,email etc).\r\n * In deserializeUser that key is matched with the in memory array / database or any data resource.\r\n *\r\n * The fetched object is attached to the request object as req.user\r\n */\r\npassport.deserializeUser((id, done) => {\r\n  User.findById(id, (err, user) => {\r\n    done(err, user);\r\n  });\r\n});\r\n\r\n/**\r\n * Sign in using Email and Password.\r\n */\r\npassport.use(new LocalStrategy({ usernameField: 'email' }, (email, password, done) => {\r\n  User.findOne({ email: email.toLowerCase() }, (err, user) => {\r\n    if (err) { return done(err); }\r\n    if (!user) {\r\n      return done(null, false, { msg: `Email ${email} not found.` });\r\n    }\r\n    user.comparePassword(password, (err, isMatch) => {\r\n      if (err) { return done(err); }\r\n      if (isMatch) {\r\n        return done(null, user);\r\n      }\r\n      return done(null, false, { msg: 'Invalid email or password.' });\r\n    });\r\n  });\r\n}));\r\n\r\n/**\r\n * OAuth Strategy Overview\r\n *\r\n * - User is already logged in.\r\n *   - Check if there is an existing account with a provider id.\r\n *     - If there is, return an error message. (Account merging not supported)\r\n *     - Else link new OAuth account with currently logged-in user.\r\n * - User is not logged in.\r\n *   - Check if it's a returning user.\r\n *     - If returning user, sign in and we are done.\r\n *     - Else check if there is an existing account with user's email.\r\n *       - If there is, return an error message.\r\n *       - Else create a new account.\r\n */\r\n\r\n/**\r\n * Sign in with Google.\r\n */\r\npassport.use(new GoogleStrategy({\r\n  clientID: process.env.GOOGLE_ID,\r\n  clientSecret: process.env.GOOGLE_SECRET,\r\n  callbackURL: '/auth/google/callback',\r\n  passReqToCallback: true\r\n}, (req, accessToken, refreshToken, profile, done) => {\r\n  if (req.user) {\r\n    User.findOne({ google: profile.id }, (err, existingUser) => {\r\n      if (err) { return done(err); }\r\n      if (existingUser) {\r\n        req.flash('errors', { msg: 'There is already a Google account that belongs to you. Sign in with that account or delete it, then link it with your current account.' });\r\n        done(err);\r\n      } else {\r\n        User.findById(req.user.id, (err, user) => {\r\n          if (err) { return done(err); }\r\n          user.google = profile.id;\r\n          user.tokens.push({ kind: 'google', accessToken });\r\n          user.profile.name = user.profile.name || profile.displayName;\r\n          user.profile.fName = user.profile.fName || profile.name.givenName;\r\n          user.profile.lName = user.profile.lName || profile.name.familyName;\r\n          user.profile.gender = user.profile.gender || profile._json.gender;\r\n          user.profile.picture = user.profile.picture || profile._json.image.url;\r\n          user.save((err) => {\r\n            req.flash('info', { msg: 'Google account has been linked.' });\r\n            done(err, user);\r\n          });\r\n        });\r\n      }\r\n    });\r\n  } else {\r\n    User.findOne({ google: profile.id }, (err, existingUser) => {\r\n      if (err) { return done(err); }\r\n      if (existingUser) {\r\n        return done(null, existingUser);\r\n      }\r\n      User.findOne({ email: profile.emails[0].value }, (err, existingEmailUser) => {\r\n        if (err) { return done(err); }\r\n        if (existingEmailUser) {\r\n          req.flash('errors', { msg: 'There is already an account using this email address. Sign in to that account and link it with Google manually from Account Settings.' });\r\n          done(err);\r\n        } else {\r\n          const user = new User();\r\n          user.email = profile.emails[0].value;\r\n          user.google = profile.id;\r\n          user.tokens.push({ kind: 'google', accessToken });\r\n          user.profile.name = profile.displayName;\r\n          user.profile.fName = profile.name.givenName;\r\n          user.profile.lName = profile.name.familyName;\r\n          user.profile.gender = profile._json.gender;\r\n          user.profile.picture = profile._json.image.url;\r\n          user.save((err) => {\r\n            done(err, user);\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n}));\r\n\r\n\r\n/**\r\n * Login Required middleware.\r\n */\r\nexports.isAuthenticated = (req, res, next) => {\r\n  if (req.isAuthenticated()) {\r\n    return next();\r\n  }\r\n  res.redirect('/login');\r\n};\r\n\r\n/**\r\n * Authorization Required middleware.\r\n */\r\nexports.isAuthorized = (req, res, next) => {\r\n  const provider = req.path.split('/').slice(-1)[0];\r\n  const token = req.user.tokens.find(token => token.kind === provider);\r\n  if (token) {\r\n    next();\r\n  } else {\r\n    res.redirect(`/auth/${provider}`);\r\n  }\r\n};\r\n","// jshint esversion: 8\r\nconst nodemailer = require('nodemailer');\r\nconst mailjet = require('node-mailjet').connect(\r\n  process.env.MJ_APIKEY_PUBLIC,\r\n  process.env.MJ_APIKEY_PRIVATE\r\n);\r\n\r\n// TODO implement contact form\r\n\r\n/**\r\n * GET /contact\r\n * Contact form page.\r\n */\r\nexports.getContact = (req, res) => {\r\n  const unknownUser = !(req.user);\r\n  res.render('contact', {\r\n    title: 'Contact',\r\n    unknownUser,\r\n  });\r\n};\r\n\r\n/**\r\n * POST /contact\r\n * Send a contact form via Nodemailer.\r\n */\r\nexports.postContact = (req, res, next) => {\r\n  let fromName;\r\n  let fromEmail;\r\n  if (!req.user) {\r\n    req.assert('name', 'Name cannot be blank').notEmpty();\r\n    req.assert('email', 'Email is not valid').isEmail();\r\n  }\r\n  req.assert('message', 'Message cannot be blank').notEmpty();\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/contact');\r\n  }\r\n\r\n  if (!req.user) {\r\n    fromName = req.body.name;\r\n    fromEmail = req.body.email;\r\n  } else {\r\n    fromName = req.user.profile.name || '';\r\n    fromEmail = req.user.email;\r\n  }\r\n\r\n  const sendContactForm = async () => {\r\n    const sendEmail = mailjet.post('send', {version: 'v3.1'});\r\n    const emailData = {\r\n      \"Messages\": [{\r\n        \"From\": {\r\n          \"Email\": \"jaka.daneu@siol.net\",\r\n          \"Name\": `${fromName} - ${fromEmail}`\r\n        },\r\n        \"To\": [{\r\n          \"Email\": \"jakad@me.com\",\r\n          \"Name\": 'TExpenses App'\r\n        }],\r\n        'Subject': 'Contact TExpenses App',\r\n        'TextPart': req.body.message\r\n      }]\r\n    };\r\n\r\n    try {\r\n      await sendEmail.request(emailData);\r\n      return req.flash('info', {\r\n        msg: `An e-mail has been sent to TExpenses App.`\r\n      });\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n\r\n      req.flash('errors', {\r\n        msg: 'Error sending the contact message. Please try again shortly.'\r\n      });\r\n      return err;\r\n    }\r\n  };\r\n\r\n  sendContactForm()\r\n    .then(() => {\r\n      res.redirect('/');\r\n    })\r\n    .catch(next);\r\n\r\n};\r\n","const mongoose = require('mongoose');\r\nconst _ = require('lodash');\r\nconst moment = require('moment');\r\n\r\nconst User = require('../models/User');\r\nconst Travel = require('../models/Travel');\r\nconst Expense = require('../models/Expense');\r\nconst Currency = require('../models/Currency');\r\nconst ObjectId = mongoose.Types.ObjectId;\r\n\r\nconst {expenseTypes} = require('../lib/globals');\r\nconst constants = require('../lib/constants');\r\n\r\n\r\n/*\r\n * GET /travels/:id/expenses/:id\r\n */\r\n exports.getExpense = (req, res, next) => {\r\n\r\n   const id = req.params.id;\r\n   if (!ObjectId.isValid(id)) {  return next(new Error('Not valid Object Id'));}\r\n   let mileageType;\r\n   const expense = res.locals.expense;\r\n   const travel = res.locals.travel;\r\n   const tDateFrom = travel.dateFrom;\r\n   const tDateTo = travel.dateTo;\r\n\r\n   if (expense.type != 'Mileage') {\r\n     const rate = Object.values(expense.curRate.rate)[0];\r\n     expense.rate = rate.toFixed(2);\r\n     mileageType = false;\r\n   } else {\r\n     expense.rate = travel.perMileAmount;\r\n     mileageType = true;\r\n   }\r\n\r\n\r\n   res.render('expenses/expense', {\r\n     title: 'Expense',\r\n     travel,\r\n     expense,\r\n     mileageType,\r\n     tDateFrom,\r\n     tDateTo,\r\n     constants,\r\n     rates: JSON.stringify(res.locals.rates),\r\n     expenseCurRate: JSON.stringify(expense.curRate),\r\n     expenseTypes\r\n   });\r\n }\r\n\r\n /*\r\n  * DELETE /travels/:id/expenses/:id\r\n  */\r\nexports.deleteExpense = async (req, res, next) => {\r\n\r\n  const expenseId = req.params.id;\r\n  const travel = res.locals.travel;\r\n  const expense = res.locals.expense;\r\n  const splitUrl = req.url.split('/');\r\n  Expense.findOneAndDelete({_id: expenseId, travel: travel._id})\r\n  .then((result) => {\r\n\r\n    Travel.findByIdAndUpdate(travel._id, {\r\n      $pullAll: {'expenses': [expenseId]},\r\n      $inc: { \"total\" : -expense.amountConverted }\r\n    }, (err, travel) => {\r\n      if (!err) {return next(err);}\r\n    });\r\n  }).then(() => {\r\n    req.flash('info', {msg: \"Expense successfully deleted!!\"});\r\n    res.redirect(`/travels/${travel._id}`);\r\n  }).catch( err => {\r\n      next(err);\r\n  });\r\n\r\n}\r\n\r\n/*\r\n * PATCH /travels/:id/expenses/:id\r\n */\r\nexports.updateExpense = async (req, res, next) => {\r\n  const travel = res.locals.travel;\r\n  const expense = res.locals.expense;\r\n\r\n  const currencyOptions = {\r\n      allow_negatives: false,\r\n      allow_negative_sign_placeholder: true,\r\n      thousands_separator: ',',\r\n      decimal_separator: '.',\r\n      allow_decimal: true,\r\n      require_decimal: false,\r\n      digits_after_decimal: [2],\r\n      allow_space_after_digits: false\r\n    };\r\n  const decimalOptions = {decimal_digits: 2};\r\n\r\n  req.assert('expenseDescription', 'Description is empty or to long (max 60 characters)!').isLength({min: 1, max: 60});\r\n  let dateCompare = moment(res.locals.travel.dateFrom).add(-1, 'days').format('YYYY-MM-DD');\r\n  req.assert('invoiceDate', 'Invoice date should be within travel dates').isAfter(dateCompare);\r\n  dateCompare = moment(res.locals.travel.dateTo).add(1, 'days').format('YYYY-MM-DD');\r\n  req.assert('invoiceDate', 'Invoice date should be within travel dates').isBefore(dateCompare);\r\n\r\n  if (req.body.expenseType === 'Mileage') {\r\n    req.assert('travelPerMileAmount', 'Per mile amount should be positive number with 2 decimals!').isDecimal(decimalOptions);\r\n    req.assert('invoiceUnit', 'Must be \"km\" or \"mi\"').custom(() => {\r\n      return 'km' === req.body.invoiceUnit || 'mi' === req.body.invoiceUnit\r\n    });\r\n    req.assert('amountDistance', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n    req.assert('amountDistance2', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n    req.assert('amountConverted2', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n  } else {\r\n    req.assert('invoiceCurrency', 'Currency name must be 3 charachters long').isLength({min: 3, max: 3});\r\n    req.assert('rate', 'Currency rate with 2 decimals').isNumeric().isCurrency(currencyOptions);\r\n    req.assert('amount', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n    req.assert('amountConverted', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n  }\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect(`/travels/${travel._id}`);\r\n  }\r\n\r\n\r\n  const body = _.pick(req.body, ['expenseType', 'expenseDescription', 'invoiceDate', 'amountDistance', 'amountDistance2', 'amountConverted', 'amountConverted2', 'invoiceCurrency', 'rate', 'amount']);\r\n  const invoiceDate = new Date(req.body.invoiceDate);\r\n  travel.total = (travel.total - Number(expense.amountConverted) + Number(body.amountConverted) + Number(body.amountConverted2)).toFixed(2);\r\n  // Different data if expense type is Mileage\r\n  if (req.body.expenseType != 'Mileage') {\r\n    const invoiceCurrency = req.body.invoiceCurrency.toUpperCase();\r\n    let invDate = moment(invoiceDate).format('YYYY-MM-DD');\r\n    const rate = req.body.rate;\r\n    let cur = {};\r\n\r\n    cur[invoiceCurrency] = Number(rate);\r\n    let curRate = {};\r\n    await Currency.find({base: res.locals.travel.homeCurrency, date: invoiceDate, rate: cur}, async (err, item) => {\r\n      if (item.length === 1) {\r\n        curRate = item[0];\r\n      } else {\r\n        curRate = new Currency({\r\n          base: res.locals.travel.homeCurrency,\r\n          date: invoiceDate,\r\n          rate: cur\r\n        })\r\n        await curRate.save().then((doc) => {\r\n        }).catch((err) => {\r\n          next(err);\r\n        });\r\n      }\r\n    });\r\n\r\n    expense.type = body.expenseType;\r\n    expense.description = body.expenseDescription;\r\n    expense.date = invoiceDate;\r\n    expense.currency = body.invoiceCurrency.toUpperCase();\r\n    expense.curRate = curRate;\r\n    expense.amount = body.amount;\r\n    expense.amountConverted = body.amountConverted;\r\n    expense.unit = undefined;\r\n  } else {\r\n    expense.type = body.expenseType;\r\n    expense.description = body.expenseDescription;\r\n    expense.date = invoiceDate;\r\n    expense.unit = req.user.homeDistance;\r\n    expense.amount = body.amountDistance;\r\n    expense.amountConverted = body.amountConverted2;\r\n    expense.currency = undefined;\r\n    expense.curRate = undefined;\r\n\r\n  }\r\n\r\n  await expense.save()\r\n  .then((doc) => {\r\n    travel.save()\r\n    .then(() => {\r\n      req.flash('info', {msg: 'Expense successfully updated!'})\r\n      res.redirect(`/travels/${travel._id}`);\r\n    }).catch((err) => {\r\n      next(err);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    next(err);\r\n  });\r\n\r\n}\r\n\r\n/*\r\n * POST /travels/:id/expenses/new\r\n */\r\nexports.postNewExpense = async function  (req, res, next) {\r\n  const currencyOptions = {\r\n      allow_negatives: false,\r\n      allow_negative_sign_placeholder: true,\r\n      thousands_separator: ',',\r\n      decimal_separator: '.',\r\n      allow_decimal: true,\r\n      require_decimal: false,\r\n      digits_after_decimal: [2],\r\n      allow_space_after_digits: false\r\n    };\r\n  const decimalOptions = {decimal_digits: 2};\r\n\r\n  req.assert('expenseDescription', 'Description is empty or to long (max 60 characters)!').isLength({min: 1, max: 60});\r\n  let dateCompare = moment(res.locals.travel.dateFrom).add(-1, 'days').format('YYYY-MM-DD');\r\n  req.assert('invoiceDate', 'Invoice date should be within travel dates').isAfter(dateCompare);\r\n  dateCompare = moment(res.locals.travel.dateTo).add(1, 'days').format('YYYY-MM-DD');\r\n  req.assert('invoiceDate', 'Invoice date should be within travel dates').isBefore(dateCompare);\r\n\r\n  if (req.body.expenseType === 'Mileage') {\r\n    req.assert('travelPerMileAmount', 'Per mile amount should be positive number with 2 decimals!').isDecimal(decimalOptions);\r\n    req.assert('invoiceUnit', 'Must be \"km\" or \"mi\"').custom(() => {\r\n      return 'km' === req.body.invoiceUnit || 'mi' === req.body.invoiceUnit\r\n    });\r\n    req.assert('amountDistance', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n    req.assert('amountDistance2', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n    req.assert('amountConverted2', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n  } else {\r\n    req.assert('invoiceCurrency', 'Currency name must be 3 charachters long').isLength({min: 3, max: 3});\r\n    req.assert('rate', 'Currency rate with 2 decimals').isNumeric().isCurrency(currencyOptions);\r\n    req.assert('amount', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n    req.assert('amountConverted', 'Number with 2 decimals').isDecimal(decimalOptions);\r\n  }\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect(`/travels/${req.params.id}`);\r\n  }\r\n\r\n  let expense = {};\r\n  const invoiceDate = new Date(req.body.invoiceDate);\r\n\r\n  const invoiceCurrency = req.body.invoiceCurrency.toUpperCase();\r\n  let invDate = moment(invoiceDate).format('YYYY-MM-DD');\r\n\r\n  // Different data if expense type is Mileage\r\n  if (req.body.expenseType != 'Mileage') {\r\n    const invoiceCurrency = req.body.invoiceCurrency.toUpperCase();\r\n    let invDate = moment(invoiceDate).format('YYYY-MM-DD');\r\n    const rate = req.body.rate;\r\n    let cur = {};\r\n\r\n    cur[invoiceCurrency] = Number(rate);\r\n    let curRate = {};\r\n    await Currency.find({base: res.locals.travel.homeCurrency, date: invoiceDate, rate: cur}, async (err, item) => {\r\n      if (item.length === 1) {\r\n        curRate = item[0];\r\n      } else {\r\n        curRate = new Currency({\r\n          base: res.locals.travel.homeCurrency,\r\n          date: invoiceDate,\r\n          rate: cur\r\n        })\r\n        await curRate.save();\r\n      }\r\n    });\r\n\r\n    expense = new Expense ({\r\n      travel: req.params.id,\r\n      type: req.body.expenseType,\r\n      description: req.body.expenseDescription,\r\n      date: invoiceDate,\r\n      currency: req.body.invoiceCurrency.toUpperCase(),\r\n      curRate,\r\n      amount: req.body.amount,\r\n      amountConverted: req.body.amountConverted,\r\n      _user: req.user._id\r\n    });\r\n\r\n  } else {\r\n    expense = new Expense ({\r\n      travel: req.params.id,\r\n      type: req.body.expenseType,\r\n      description: req.body.expenseDescription,\r\n      date: invoiceDate,\r\n      unit: req.user.homeDistance,\r\n      amount: req.body.amountDistance,\r\n      amountConverted: req.body.amountConverted2,\r\n      _user: req.user._id\r\n    });\r\n  }\r\n\r\n  try {\r\n    const doc = await expense.save();\r\n    const travel = await Travel.findByIdAndUpdate(res.locals.travel._id, {\r\n      $addToSet: {'expenses': doc._id}}, (err, travel) => {\r\n      if (err) {\r\n        return next(err);\r\n      }\r\n    });\r\n    // TODO refactor if statement. No need for if statement.\r\n    if (doc.type != 'Mileage') {\r\n      const result = Number(travel.total) + Number(doc.amountConverted);\r\n      travel.total = result.toFixed(2);\r\n      travel.save();\r\n    } else {\r\n      const result = Number(travel.total) + Number(doc.amountConverted);\r\n      travel.total = result.toFixed(2);\r\n      travel.save();\r\n    }\r\n  } catch (err) {\r\n    return next(err);\r\n  }\r\n\r\n  req.flash('success', {msg: 'Successfully added new expense!'});\r\n  res.redirect(`/travels/${req.params.id}`);\r\n}\r\n","const moment = require('moment');\r\nconst Travel = require('../models/Travel');\r\nconst constants = require('../lib/constants');\r\n\r\n/**\r\n * GET /\r\n * Home page.\r\n */\r\nexports.index = (req, res, next) => {\r\n  if (!req.user) {\r\n    res.render('home', {\r\n      title: 'Home'\r\n    });\r\n  } else {\r\n    Travel.byYear_byMonth(req.user).then((docs) => {\r\n      res.render('home', {\r\n        title: 'Home',\r\n        docs,\r\n        constants\r\n      });\r\n    }).catch((err) => {\r\n      next(err);\r\n    });\r\n  }\r\n};\r\n","const mongoose = require('mongoose');\r\nconst _ = require('lodash');\r\nconst moment = require('moment');\r\nconst fs = require('fs');\r\nconst Papa = require('papaparse');\r\n\r\nconst User = require('../models/User');\r\nconst Travel = require('../models/Travel');\r\nconst Expense = require('../models/Expense');\r\nconst Rate = require('../models/Rate');\r\nconst Currency = require('../models/Currency');\r\nconst ObjectId = mongoose.Types.ObjectId;\r\n\r\nconst {expenseTypes} = require('../lib/globals');\r\nconst constants = require('../lib/constants');\r\nconst postImport = require('../utils/postImport');\r\nconst myErrors = require('../utils/myErrors');\r\n\r\n/*\r\n * GET /import\r\n * Page with import form.\r\n * You can chooses between travels or expenses import.\r\n * TODO Change form. At the moment expenses import is only for multiple expenses.\r\n */\r\nexports.getImport = async function(req, res, next) {\r\n  const travels = res.locals.travels;\r\n\r\n  res.render('travels/import', {\r\n    title: 'Import',\r\n    travels\r\n  })\r\n}\r\n\r\n/*\r\n * POST /import\r\n * Import travels or expenses from CSV files.\r\n */\r\nexports.postImport = async function(req, res, next) {\r\n  let message = '';\r\n  const myFile = req.files.myFile;\r\n  const myFilePath = req.files.myFile.path;\r\n  let combinedCurrencies = [];\r\n\r\n  try {\r\n    const dataArray = await postImport.readCheckFileAndGetData(myFile, req.body.option).catch((err) => {\r\n      throw err;\r\n    });\r\n    if (dataArray instanceof Error) {\r\n      throw dataArray\r\n    }\r\n\r\n// What is user importing?\r\n    // import travels\r\n    if (req.body.option === 'travels') {\r\n      message = await postImport.travelImport(dataArray, req.user._id);\r\n      if (message.error) {\r\n        error = message.error;\r\n        message = message.msg;\r\n        throw error;\r\n      }\r\n    } else {\r\n    // import expenses\r\n      let getCurrenciesArray = await postImport.expensesImportSetCurrencyArray(dataArray, req.user._id, res.locals.travels);\r\n      const currenciesArray = getCurrenciesArray.currenciesArray;\r\n      message = getCurrenciesArray.message;\r\n      let error = getCurrenciesArray.err;\r\n      if (error) {throw error;}\r\n\r\n      // Create new currencies\r\n      const newCurrencies = await postImport.expensesImportNewCurrenciesForSave(currenciesArray).catch((err) => {\r\n        throw err;\r\n      });\r\n      let insertedCurrencies = await Currency.insertMany(newCurrencies.notExistingCurrenciesDB);\r\n      combinedCurrencies = insertedCurrencies.concat(newCurrencies.existingCurrenciesDB);\r\n\r\n      // loop trough imported data\r\n      await _.forEach(dataArray, async (value, key, object) => {\r\n        delete value.travelName;\r\n        // find currency for expense\r\n        const currency = await combinedCurrencies\r\n          .sort((a, b) => {\r\n            return a.date - b.date;\r\n          })\r\n          .find((item) => {\r\n            let dateEqual = value.date ===  moment(item.date).format('YYYY-MM-DD');\r\n            let currencyMatch = item.rate.hasOwnProperty(value.currency);\r\n            let notMileage = value.type != 'Mileage';\r\n            let result = dateEqual && currencyMatch && notMileage;\r\n            return result;\r\n        });\r\n\r\n        // set currency id for expense if currency exist in DB\r\n        if (currency) {\r\n          value.curRate = currency._id;\r\n        }\r\n      });\r\n\r\n      // Check if imported file has no data\r\n      if (dataArray.length === 0) {\r\n        throw new myErrors.importFileError('Nothing to import! File has wrong data!');\r\n      }\r\n      message = await postImport.expenseImport(dataArray).catch((err) => {\r\n        throw err;\r\n      });\r\n    }\r\n\r\n    if (message.error) {\r\n      error = message.error;\r\n      message = message.msg;\r\n      throw error;\r\n    }\r\n\r\n    postImport.deleteFile(myFilePath, 'File deleted after processed!');\r\n    req.flash('success', {\r\n      msg: message\r\n    });\r\n    res.redirect('/travels')\r\n  } catch (err) {\r\n    postImport.deleteFile(myFilePath, 'File deleted after error!');\r\n    if (!err instanceof myErrors.importFileError) {\r\n      message = 'Something went wrong. Check console log!';\r\n      next(err);\r\n    } else {\r\n      res.status(400);\r\n      message = err.message;\r\n      req.flash('errors', {\r\n        msg: message\r\n      });\r\n      res.redirect('/import');\r\n    }\r\n  }\r\n}\r\n","const mongoose = require('mongoose');\r\nconst _ = require('lodash');\r\nconst moment = require('moment');\r\nconst fs = require('fs');\r\nconst Papa = require('papaparse');\r\n\r\nconst User = require('../models/User');\r\nconst Travel = require('../models/Travel');\r\nconst Expense = require('../models/Expense');\r\nconst Rate = require('../models/Rate');\r\nconst ObjectId = mongoose.Types.ObjectId;\r\n\r\nconst {expenseTypes} = require('../lib/globals');\r\nconst constants = require('../lib/constants');\r\n\r\nconst updateExpensesToMatchTravelRangeDates = require('../utils/updateExpensesToMatchTravelRangeDates');\r\n\r\nconst travelExpensesToPDF = require('../utils/travelExpensesToPDF');\r\nconst travelsTotalToPDF = require('../utils/travelsTotalToPDF');\r\n\r\n/*\r\n * GET /travels/total_pdf\r\n * Create, open in new tab and save PDF file for filtered travels\r\n */\r\nexports.getTravelsTotalPDF = async function(req, res, next) {\r\n// Create and open PDF\r\n  function createTravelsTotalPDF(res, travels, user, dateRange, sum, indexes) {\r\n    const stream = travelsTotalToPDF(travels, user, dateRange, sum, indexes);\r\n    let filename = `TOTAL_${user._id}_${df}_${dt}.pdf`;  // Be careful of special characters\r\n    filename = encodeURIComponent(filename);  // Ideally this should strip them\r\n    res.setHeader('Content-disposition', 'inline; filename=\"' + filename + '\"');\r\n    res.setHeader('Content-type', 'application/pdf');\r\n    stream.pipe(res);\r\n  }\r\n\r\n  let travels, queryDateFrom, queryDateTo, totalSum;\r\n  // Get date range from url query\r\n  const df = req.query.df;\r\n  const dt = req.query.dt;\r\n  const dateRange = {df, dt};\r\n  const indexes = []\r\n  const travelIndexesArray = await User.aggregate([\r\n\r\n    {\r\n      '$project': {\r\n        'travels': 1\r\n      }\r\n    },\r\n    {'$match': {\r\n      '_id': req.user._id\r\n    }}\r\n\r\n  ], (err, docs) => {\r\n    // console.log(docs);\r\n  });\r\n  const travelIndexes = travelIndexesArray[0].travels;\r\n  // if statement is safety in case date range is not passed as url query\r\n  if (df === '' || dt === '') {\r\n    travels = await Travel.find({_user: res.locals.user._id});\r\n    totalSum = Travel.aggregate([\r\n      {'$match': {'_user': res.locals.user._id}},\r\n      {'$group': {'_id': null, 'sum': {'$sum': '$total'}}}\r\n    ], (err, result) => {\r\n    if (err) {next(err)\r\n    } else {\r\n      let sum;\r\n      if (result.length === 0) {sum = 0;} else {sum = Number(result[0].sum);}\r\n      createTravelsTotalPDF(res, travels, res.locals.user, dateRange, sum, indexes);\r\n    }\r\n});\r\n  } else {\r\n\r\n    queryDateFrom = new Date(df);\r\n    queryDateTo = new Date(dt);\r\n    travels = await Travel.find({\r\n      _user: res.locals.user._id,\r\n      $and: [{dateFrom: {$gte: queryDateFrom}}, {dateFrom: {$lte: queryDateTo}}]\r\n    });\r\n    totalSum = Travel.aggregate([\r\n      {'$match': {'_user': res.locals.user._id, $and: [{dateFrom: {$gte: queryDateFrom}}, {dateFrom: {$lte: queryDateTo}}]}},\r\n      {'$group': {'_id': null, 'sum': {'$sum': '$total'}}}\r\n], (err, result) => {\r\n  if (err) {\r\n    next(err)\r\n  } else {\r\n    let sum;\r\n    if (result.length === 0) {sum = 0;} else {sum = Number(result[0].sum);}\r\n    let x = 'x';\r\n    // console.log(typeof x);\r\n    // console.log(travelIndexes);\r\n    // console.log(typeof travelIndexes[63]);\r\n    travels.forEach((item, idx) => {\r\n      travelIndexes.forEach((item, idx, object) => {\r\n        object[idx] = item.toString()\r\n      });\r\n      const matchIndex = travelIndexes.indexOf(item._id.toString()) + 1;\r\n      indexes.push(matchIndex);\r\n    })\r\n    createTravelsTotalPDF(res, travels, res.locals.user, dateRange, sum, indexes);\r\n  }\r\n});}}\r\n\r\n/*\r\n * GET /travels/:id/pdf\r\n * Create, open in new tab and save PDF for displayed travel\r\n */\r\nexports.getTravelExpensesPDF = async function(req, res, next) {\r\n  const invoiceNumberArray = await User.aggregate([\r\n    {\r\n      '$project': {\r\n        'index': {\r\n          '$indexOfArray': [\r\n            '$travels', new ObjectId(res.locals.travel._id)\r\n          ]\r\n        }\r\n      }\r\n    }, {\r\n      '$match': {\r\n        '_id': new ObjectId(req.user._id)\r\n      }\r\n    }\r\n  ]);\r\n  const idx = invoiceNumberArray[0].index + 1;\r\n  console.log(idx);\r\n  const stream = travelExpensesToPDF(res.locals.travel, req.user, idx);\r\n  let filename = `TReport_${req.user._id}_${res.locals.travel._id}_${idx}.pdf`;  // Be careful of special characters\r\n  filename = encodeURIComponent(filename);  // Ideally this should strip them\r\n  res.setHeader('Content-disposition', 'inline; filename=\"' + filename + '\"');\r\n  res.setHeader('Content-type', 'application/pdf');\r\n  stream.pipe(res);\r\n}\r\n\r\n/*\r\n * GET /travels\r\n * All travels\r\n */\r\nexports.getTravels = async function(req, res) {\r\n  let filter, sortBy, searchMinDate, searchMaxDate, minDate, maxDate, yearMin, yearMax, years = [];\r\n  filter = req.query.filter;\r\n  if (!filter) {\r\n    filter = 'All';\r\n  }\r\n  sortBy = req.query.sortBy;\r\n  if (!sortBy) {\r\n    sortBy = '-dateFrom';\r\n  }\r\n  searchMinDate = req.query.minDate;\r\n  searchMaxDate = req.query.maxDate;\r\n\r\n  try {\r\n    await Travel.aggregate([\r\n      {'$match': {'_user': req.user._id, _id: {$in: req.user.travels}}},\r\n      {'$group': {'_id': req.user._id,'minDate': {'$min': '$dateFrom'}, 'maxDate': {'$max': '$dateFrom'}}}\r\n  ], (err, doc) => {\r\n    if (err) {next(err);}\r\n    if (doc.length != 0) {\r\n      minDate = moment(doc[0].minDate).format('YYYY-MM-DD');\r\n      maxDate = moment(doc[0].maxDate).format('YYYY-MM-DD');\r\n      yearMin = moment(doc[0].minDate).format('YYYY');\r\n      yearMax = moment().format('YYYY');\r\n      for (i = Number(yearMax); i >= Number(yearMin); i--) {years.push(i);}\r\n    } else {\r\n      minDate = maxDate = moment().format('YYYY-MM-DD');\r\n      yearMin = yearMax = moment().format('YYYY');\r\n      years = [yearMin];\r\n    }\r\n\r\n    if (!searchMinDate) {\r\n      searchMinDate = minDate;\r\n    }\r\n    if (!searchMaxDate) {\r\n      searchMaxDate = maxDate;\r\n    }\r\n\r\n    Travel.find({_id: {$in: req.user.travels}, $and: [{dateFrom: {$gte: new Date(searchMinDate)}}, {dateFrom: {$lte: new Date(searchMaxDate)}}]}).sort(sortBy)\r\n    .then((docs) => {\r\n      const travels = docs;\r\n      res.render('travels/travels', {\r\n        title: 'Travels',\r\n        travels,\r\n        filter,\r\n        searchMinDate,\r\n        searchMaxDate,\r\n        years\r\n      });\r\n    });\r\n\r\n  });\r\n} catch (err) {\r\n  next(err)\r\n  }\r\n}\r\n\r\n/*\r\n * GET /travels/new\r\n * Form to post new travel\r\n */\r\nexports.getNewTravel = async function(req, res) {\r\n  res.render('travels/new', {\r\n    title: 'New travel',\r\n    user: req.user\r\n  });\r\n}\r\n\r\n/*\r\n * POST /travels/new\r\n * Create new travel based on user input\r\n */\r\nexports.postNewTravel = async function(req, res, next) {\r\n\r\n  req.assert('description', 'Description is empty or to long (max 60 characters)!').isLength({min: 1, max: 60});\r\n  req.assert('homeCurrency', 'Home currency should have exactly 3 characters!').isLength({min: 3,max: 3});\r\n\r\n  const decimalOptions = {decimal_digits: 2};\r\n  req.assert('perMileAmount', 'Per mile amount should be positive number with 2 decimals!').isDecimal(decimalOptions);\r\n\r\n  const dateCompare = moment(req.body.dateTo).add(1, 'days').format('YYYY-MM-DD');\r\n  req.assert('dateFrom', 'Date from should be before date to').isBefore(dateCompare);\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/travels/new');\r\n  }\r\n\r\n  const dateFrom = new Date(req.body.dateFrom);\r\n  const dateTo = new Date(req.body.dateTo);\r\n  const travel = new Travel({\r\n    _user: req.user._id,\r\n    description: req.body.description.replace(/\\s+/g, \" \").trim(),\r\n    dateFrom,\r\n    dateTo,\r\n    homeCurrency: req.body.homeCurrency,\r\n    perMileAmount: req.body.perMileAmount\r\n  });\r\n\r\n  try {\r\n    const doc = await travel.save();\r\n    await User.findByIdAndUpdate(req.user._id, {$addToSet: {'travels': doc._id}}, (err, user) => {if (err) {return next(err);}});\r\n  } catch (err) {return next(err);}\r\n\r\n  req.flash('success', {msg: 'Successfully added new travel!'});\r\n  res.redirect('/travels');\r\n}\r\n\r\n/*\r\n * GET /travels/:id\r\n * Show choosen travel\r\n */\r\nexports.getTravel = async function(req, res, next) {\r\n  const id = req.params.id;\r\n  if (!ObjectId.isValid(id)) {  return next(new Error('Not valid Object Id'));}\r\n  const travel = res.locals.travel;\r\n\r\n  try {\r\n    const expenses = travel.expenses;\r\n\r\n    expenses.forEach((expense, index, arr) => {\r\n      if (expense.type != 'Mileage') {\r\n        const rate = Object.values(expense.curRate.rate)[0];\r\n        expense.rate = rate.toFixed(2);\r\n      } else {expense.rate = travel.perMileAmount;}\r\n    });\r\n\r\n    if (!travel) {return next(new Error('Travel not found'))}\r\n\r\n    res.render('travels/travel', {\r\n      title: 'Travel',\r\n      travel,\r\n      expenses,\r\n      expenseTypes,\r\n      constants,\r\n      rates: JSON.stringify(res.locals.rates)\r\n    });\r\n  } catch (err) {return next(err);}\r\n};\r\n\r\n/*\r\n * DELETE /travels/:id\r\n * Delete chosen/displayed travel\r\n */\r\nexports.deleteTravel = async function(req, res, next) {\r\n  const id = req.params.id;\r\n\r\n  if (!ObjectId.isValid(id)) {return next(new Error('Not valid Object Id'));}\r\n\r\n  try {\r\n    const travel = await Travel.findOneAndDelete({_id: id, _user: req.user._id});\r\n\r\n    if (!travel) {\r\n      req.flash('error', {msg: 'Travel not found!!'});\r\n      return next(new Error('Travel not found'));\r\n    }\r\n\r\n    Expense.deleteMany({travel: travel._id, _user: req.user._id}, (err) => {\r\n      if (err) {return next(err)}\r\n    });\r\n\r\n    User.findByIdAndUpdate(req.user._id, {$pullAll: {'travels': [travel._id]}}, (err, user) => {\r\n      if (!err) {return next(err);}\r\n    });\r\n    req.flash('info', {msg: 'Travel successfully deleted!'});\r\n    res.redirect('/travels');\r\n  } catch (err) {return next(err);}\r\n};\r\n\r\n/*\r\n * PATCH /travels/new\r\n * Update travel information\r\n * If travel's expenses dates are not within travel date range, update expenses and recalculate travel total\r\n */\r\nexports.updateTravel = async function(req, res, next) {\r\n  const currencyOptions = {\r\n    allow_negatives: false,\r\n    allow_negative_sign_placeholder: true,\r\n    thousands_separator: ',',\r\n    decimal_separator: '.',\r\n    allow_decimal: true,\r\n    require_decimal: false,\r\n    digits_after_decimal: [2],\r\n    allow_space_after_digits: false\r\n  }\r\n  req.assert('description', 'Description is empty or to long (max 120 characters)!').isLength({min: 1, max: 60});\r\n  req.assert('homeCurrency', 'Home currency should have exactly 3 characters!').isLength({min: 3, max: 3});\r\n  req.assert('perMileAmount', 'Per mile amount should be positive number with 2 decimals!').isNumeric().isCurrency(currencyOptions);\r\n\r\n  const dateCompare = moment(req.body.dateTo).add(1, 'days').format('YYYY-MM-DD');\r\n  req.assert('dateFrom', 'Date from should be before date to').isBefore(dateCompare);\r\n\r\n  const errors = req.validationErrors();\r\n  const id = req.params.id;\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect(`/travels/${id}`);\r\n  }\r\n\r\n  // Get data from html form to update travel\r\n  const body = _.pick(req.body, ['description', 'dateFrom', 'dateTo', 'homeCurrency', 'perMileAmount']);\r\n\r\n  if (!ObjectId.isValid(id)) {return next(new Error('Not valid Object Id'));}\r\n\r\n  try {\r\n    // Update travel with new data\r\n    let travel = await Travel.findOneAndUpdate(\r\n      {_id: id, _user: req.user.id},\r\n      {$set: body}, {new: true})\r\n      .populate({path: 'expenses', populate: {path: 'curRate'}});\r\n\r\n    if (!travel) {return next(new Error('Travel not found'));}\r\n    /*\r\n     * Check expenses dates and set them within travel dates.\r\n     * Calculate travel total. New expenses date, new rate.\r\n     * Rates for same currency are not the same for different dates.\r\n     */\r\n    updateExpensesToMatchTravelRangeDates(travel, res.locals.rates).then((expenses) => {\r\n      travel.save()\r\n        .then((doc) => {\r\n          Travel.findOne({_id: doc._id, _user: req.user.id})\r\n          .populate({path: 'expenses', populate: {path: 'curRate'}})\r\n          .then((doc) => {\r\n            doc.updateTotal()\r\n              .then((doc) => {\r\n                req.flash('success', {msg: 'Travel successfully updated!'});\r\n                res.redirect('/travels');\r\n              });\r\n          });\r\n      });\r\n    });\r\n\r\n  } catch (err) {\r\n    return next(err);\r\n  }\r\n};\r\n","// jshint esversion: 6\r\n\r\nconst {promisify} = require('util');\r\nconst crypto = require('crypto');\r\nconst nodemailer = require('nodemailer');\r\nconst passport = require('passport');\r\nconst User = require('../models/User');\r\nconst Travel = require('../models/Travel');\r\nconst Expense = require('../models/Expense');\r\nconst toTitleCase = require('../utils/utils').toTitleCase;\r\n\r\nconst mailjet = require('node-mailjet').connect(\r\n  process.env.MJ_APIKEY_PUBLIC,\r\n  process.env.MJ_APIKEY_PRIVATE\r\n);\r\n\r\nconst randomBytesAsync = promisify(crypto.randomBytes);\r\n\r\n/**\r\n * GET /login\r\n * Login page.\r\n */\r\nexports.getLogin = (req, res) => {\r\n  if (req.user) {\r\n    return res.redirect('/');\r\n  }\r\n  res.render('account/login', {\r\n    title: 'Login'\r\n  });\r\n};\r\n\r\n/**\r\n * POST /login\r\n * Sign in using email and password.\r\n */\r\nexports.postLogin = (req, res, next) => {\r\n  req.assert('email', 'Email is not valid').isEmail();\r\n  req.assert('password', 'Password cannot be blank').notEmpty();\r\n  req.sanitize('email').normalizeEmail({\r\n    gmail_remove_dots: false\r\n  });\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/login');\r\n  }\r\n\r\n  passport.authenticate('local', (err, user, info) => {\r\n    if (err) {return next(err);}\r\n    if (!user) {\r\n      req.flash('errors', info);\r\n      return res.redirect('/login');\r\n    }\r\n    req.logIn(user, (err) => {\r\n      if (err) {return next(err);}\r\n      req.flash('success', {\r\n        msg: 'Success! You are logged in.'\r\n      });\r\n      res.redirect(req.session.returnTo || '/');\r\n    });\r\n  })(req, res, next);\r\n};\r\n\r\n/**\r\n * GET /logout\r\n * Log out.\r\n */\r\nexports.logout = (req, res) => {\r\n  req.logout();\r\n  req.session.destroy((err) => {\r\n    if (err) console.log('Error : Failed to destroy the session during logout.', err);\r\n    req.user = null;\r\n    res.redirect('/');\r\n  });\r\n};\r\n\r\n/**\r\n * GET /signup\r\n * Signup page.\r\n */\r\nexports.getSignup = (req, res) => {\r\n  if (req.user) {return res.redirect('/');}\r\n  res.render('account/signup', {\r\n    title: 'Create Account'\r\n  });\r\n};\r\n\r\n/**\r\n * POST /signup\r\n * Create a new local account.\r\n */\r\nexports.postSignup = (req, res, next) => {\r\n  req.assert('email', 'Email is not valid').isEmail();\r\n  req.assert('password', 'Password must be at least 4 characters long').len(4);\r\n  req.assert('confirmPassword', 'Passwords do not match').equals(req.body.password);\r\n  req.assert('fName', 'First name should not be empty').notEmpty();\r\n  req.assert('lName', 'Last name should not be empty').notEmpty();\r\n  req.assert('team', 'Team should not be empty').notEmpty();\r\n  req.assert('jobPosition', 'Position should not be empty').notEmpty();\r\n  req.sanitize('email').normalizeEmail({gmail_remove_dots: false});\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/signup');\r\n  }\r\n\r\n  const user = new User({\r\n    email: req.body.email,\r\n    password: req.body.password,\r\n    profile: {\r\n      fName: req.body.fName,\r\n      lName: req.body.lName\r\n    },\r\n    team: req.body.team,\r\n    jobPosition: req.body.jobPosition\r\n  });\r\n\r\n  User.findOne({email: req.body.email}, (err, existingUser) => {\r\n    if (err) {return next(err);}\r\n    if (existingUser) {\r\n      req.flash('errors', {msg: 'Account with that email address already exists.'});\r\n      return res.redirect('/signup');\r\n    }\r\n    user.save((err) => {\r\n      if (err) {return next(err);}\r\n      req.logIn(user, (err) => {\r\n        if (err) {return next(err);}\r\n        res.redirect('/');\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * GET /account\r\n * Profile page.\r\n */\r\nexports.getAccount = (req, res) => {\r\n  if (req.query.length != 0) {\r\n    const team = req.query.team;\r\n    const jobPosition = req.query.jobPosition;\r\n    if (team === '') {\r\n      req.flash('info', {msg: 'To create PDF you need to define TEAM'});\r\n    }\r\n    if (jobPosition === '') {\r\n      req.flash('info', {msg: 'To create PDF you need to define POSITION'});\r\n    }\r\n  }\r\n  res.render('account/profile', {\r\n    title: 'Account Management'\r\n  });\r\n};\r\n\r\n/**\r\n * POST /account/profile\r\n * Update profile information.\r\n */\r\nexports.postUpdateProfile = (req, res, next) => {\r\n  req.assert('email', 'Please enter a valid email address.').isEmail();\r\n  req.assert('homeCurrency', 'Home currency should have exactly 3 characters').isLength({min: 3, max: 3});\r\n  req.assert('perMileAmount', 'Per mile amount should be number').isNumeric();\r\n  req.assert('fName', 'First name should not be empty').notEmpty();\r\n  req.assert('lName', 'Last name should not be empty').notEmpty();\r\n  req.assert('team', 'Team should not be empty').notEmpty();\r\n  req.assert('jobPosition', 'Position should not be empty').notEmpty();\r\n  req.sanitize('email').normalizeEmail({gmail_remove_dots: false});\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/account');\r\n  }\r\n\r\n  User.findById(req.user.id, (err, user) => {\r\n    if (err) {return next(err);}\r\n\r\n    user.email = req.body.email || '';\r\n    user.profile.name = req.body.name || '';\r\n    user.profile.fName = req.body.fName || '';\r\n    user.profile.lName = req.body.lName || '';\r\n    user.team = req.body.team || '';\r\n    user.jobPosition = req.body.jobPosition || '';\r\n    user.profile.gender = req.body.gender || '';\r\n    user.homeCurrency = req.body.homeCurrency.toUpperCase() || '';\r\n    user.homeDistance = req.body.homeDistance || '';\r\n    user.perMileAmount = req.body.perMileAmount || '';\r\n    user.profile.location = req.body.location || '';\r\n    user.profile.website = req.body.website || '';\r\n    user.save((err) => {\r\n      if (err) {\r\n        if (err.code === 11000) {\r\n          req.flash('errors', {msg: 'The email address you have entered is already associated with an account.'});\r\n          return res.redirect('/account');\r\n        }\r\n        return next(err);\r\n      }\r\n      req.flash('success', {msg: 'Profile information has been updated.'});\r\n      res.redirect('/account');\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * POST /account/password\r\n * Update current password.\r\n */\r\nexports.postUpdatePassword = (req, res, next) => {\r\n  req.assert('password', 'Password must be at least 4 characters long').len(4);\r\n  req.assert('confirmPassword', 'Passwords do not match').equals(req.body.password);\r\n\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/account');\r\n  }\r\n\r\n  User.findById(req.user.id, (err, user) => {\r\n    if (err) {return next(err);}\r\n    user.password = req.body.password;\r\n    user.save((err) => {\r\n      if (err) {return next(err);}\r\n      req.flash('success', {msg: 'Password has been changed.'});\r\n      res.redirect('/account');\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * POST /account/delete\r\n * Delete user account.\r\n */\r\nexports.postDeleteAccount = (req, res, next) => {\r\n  const travelsIds = req.user.travels;\r\n  Expense.deleteMany({travel: {$in: travelsIds}}, (err, docs) => {\r\n    if (err) {next(err);}\r\n  });\r\n  Travel.deleteMany({_user: req.user._id}, (err, docs) => {\r\n    if (err) {next(err);}\r\n  });\r\n  User.deleteOne({_id: req.user.id}, (err) => {\r\n    if (err) {return next(err);}\r\n    req.logout();\r\n    req.flash('info', {msg: 'Your account has been deleted.'});\r\n    res.redirect('/');\r\n  });\r\n};\r\n\r\n/**\r\n * GET /account/unlink/:provider\r\n * Unlink OAuth provider.\r\n */\r\nexports.getOauthUnlink = (req, res, next) => {\r\n  const {provider} = req.params;\r\n  User.findById(req.user.id, (err, user) => {\r\n    if (err) {return next(err);}\r\n    const lowerCaseProvider = provider.toLowerCase();\r\n    const titleCaseProvider = toTitleCase(provider);\r\n    user[lowerCaseProvider] = undefined;\r\n    const tokensWithoutProviderToUnlink = user.tokens.filter(token =>\r\n      token.kind !== lowerCaseProvider);\r\n    // Some auth providers do not provide an email address in the user profile.\r\n    // As a result, we need to verify that unlinking the provider is safe by ensuring\r\n    // that another login method exists.\r\n    if (!(user.email && user.password) && tokensWithoutProviderToUnlink.length === 0) {\r\n      req.flash('errors', {\r\n        msg: `The ${titleCaseProvider} account cannot be unlinked without another form of login enabled.` +\r\n          ' Please link another account or add an email address and password.'\r\n      });\r\n      return res.redirect('/account');\r\n    }\r\n    user.tokens = tokensWithoutProviderToUnlink;\r\n    user.save((err) => {\r\n      if (err) {return next(err);}\r\n      req.flash('info', {msg: `${titleCaseProvider} account has been unlinked.`});\r\n      res.redirect('/account');\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * GET /reset/:token\r\n * Reset Password page.\r\n */\r\nexports.getReset = (req, res, next) => {\r\n  if (req.isAuthenticated()) {return res.redirect('/');}\r\n  User\r\n    .findOne({passwordResetToken: req.params.token})\r\n    .where('passwordResetExpires').gt(Date.now())\r\n    .exec((err, user) => {\r\n      if (err) {\r\n        return next(err);\r\n      }\r\n      if (!user) {\r\n        req.flash('errors', {msg: 'Password reset token is invalid or has expired.'});\r\n        return res.redirect('/forgot');\r\n      }\r\n      res.render('account/reset', {\r\n        title: 'Password Reset'\r\n      });\r\n    });\r\n};\r\n\r\n/**\r\n * POST /reset/:token\r\n * Process the reset password request.\r\n */\r\n\r\nexports.postReset = (req, res, next) => {\r\n  req.assert('password', 'Password must be at least 4 characters long.').len(4);\r\n  req.assert('confirm', 'Passwords must match.').equals(req.body.password);\r\n  const errors = req.validationErrors();\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('back');\r\n  }\r\n  const resetPassword = () =>\r\n    User\r\n      .findOne({passwordResetToken: req.params.token})\r\n      .where('passwordResetExpires').gt(Date.now())\r\n      .then((user) => {\r\n        if (!user) {\r\n          req.flash('errors', {  msg: 'Password reset token is invalid or has expired.'});\r\n          return res.redirect('back');\r\n        }\r\n        user.password = req.body.password;\r\n        user.passwordResetToken = undefined;\r\n        user.passwordResetExpires = undefined;\r\n        return user.save().then(() => new Promise((resolve, reject) => {\r\n          req.logIn(user, (err) => {\r\n            if (err) {return reject(err);}\r\n            resolve(user);\r\n          });\r\n        })).catch((err) => {return err;});\r\n      }).catch((err) => {return err;});\r\n\r\n  const sendResetPasswordEmail = (user) => {\r\n    if (!user) {return;}\r\n    const sendEmail = mailjet.post('send', {version: 'v3.1'});\r\n    const emailData = {\r\n      \"Messages\": [{\r\n        \"From\": {\r\n          \"Email\": \"jaka.daneu@siol.net\",\r\n          \"Name\": \"Mailjet Pilot\"\r\n        },\r\n        \"To\": [{\r\n          \"Email\": user.email,\r\n          \"Name\": user.fullName()\r\n        }],\r\n        'Subject': 'Your password for TExpenses has been changed',\r\n        'TextPart': `Hello,\\n\\nThis is a confirmation that the password for your account ${user.email} has just been changed.\\n`\r\n      }]\r\n    };\r\n    return sendEmail\r\n      .request(emailData)\r\n      .then((response) => {\r\n        req.flash('success', {msg: 'Success! Your password has been changed.'});\r\n      })\r\n      .catch((err) => {\r\n        if (err.message === 'self signed certificate in certificate chain') {\r\n          console.log('WARNING: Self signed certificate in certificate chain. Retrying with the self signed certificate. Use a valid certificate if in production.');\r\n          req.flash('success', {msg: 'Success! Your password has been changed.'});\r\n        }\r\n        console.log('ERROR: Could not send password reset confirmation email after security downgrade.\\n', err);\r\n        req.flash('warning', {msg: 'Your password has been changed, however we were unable to send you a confirmation email. We will be looking into it shortly.'});\r\n        return err;\r\n      });\r\n  };\r\n\r\nresetPassword()\r\n  .then(sendResetPasswordEmail)\r\n  .then(() => {if (!res.finished) res.redirect('/');})\r\n  .catch(err => next(err));\r\n};\r\n\r\n/**\r\n * GET /forgot\r\n * Forgot Password page.\r\n */\r\nexports.getForgot = (req, res) => {\r\n  if (req.isAuthenticated()) {return res.redirect('/');}\r\n  res.render('account/forgot', {\r\n    title: 'Forgot Password'\r\n  });\r\n};\r\n\r\n/**\r\n * POST /forgot\r\n * Create a random token, then the send user an email with a reset link.\r\n */\r\nexports.postForgot = (req, res, next) => {\r\n  req.assert('email', 'Please enter a valid email address.').isEmail();\r\n  req.sanitize('email').normalizeEmail({gmail_remove_dots: false});\r\n  const errors = req.validationErrors();\r\n\r\n  if (errors) {\r\n    req.flash('errors', errors);\r\n    return res.redirect('/forgot');\r\n  }\r\n\r\n  const createRandomToken = randomBytesAsync(16)\r\n    .then(buf => buf.toString('hex'));\r\n\r\n  const setRandomToken = token =>\r\n    User\r\n    .findOne({email: req.body.email})\r\n    .then((user) => {\r\n      if (!user) {\r\n        req.flash('errors', {msg: 'Account with that email address does not exist.'});\r\n      } else {\r\n        user.passwordResetToken = token;\r\n        user.passwordResetExpires = Date.now() + 3600000; // 1 hour\r\n        user = user.save();\r\n      }\r\n      return user;\r\n    });\r\n\r\n  const sendForgotPasswordEmail = (user) => {\r\n    if (!user) {return;}\r\n    const token = user.passwordResetToken;\r\n    const sendEmail = mailjet.post('send', {version: 'v3.1'});\r\n    const emailData = {\r\n      \"Messages\": [{\r\n        \"From\": {\r\n          \"Email\": \"jaka.daneu@siol.net\",\r\n          \"Name\": \"TExpenses App\"\r\n        },\r\n        \"To\": [{\r\n          \"Email\": user.email,\r\n          \"Name\": user.fullName()\r\n        }],\r\n        'Subject': 'Reset your password for TExpenses',\r\n        'TextPart': `You are receiving this email because you (or someone else) have requested the reset of the password for your account.\\n\\n\r\n            //       Please click on the following link, or paste this into your browser to complete the process:\\n\\n\r\n            //       http://${req.headers.host}/reset/${token}\\n\\n\r\n            //       If you did not request this, please ignore this email and your password will remain unchanged.\\n`\r\n\r\n      }]\r\n    };\r\n\r\n    return sendEmail\r\n      .request(emailData)\r\n      .then((response) => {\r\n        req.flash('info', {msg: `An e-mail has been sent to ${user.email} with further instructions.`});\r\n      })\r\n      .catch((err) => {\r\n        if (err.message === 'self signed certificate in certificate chain') {\r\n          console.log('WARNING: Self signed certificate in certificate chain. Retrying with the self signed certificate. Use a valid certificate if in production.');\r\n        }\r\n        req.flash('errors', {msg: 'Error sending the password reset message. Please try again shortly.'});\r\n        return err;\r\n      });\r\n  };\r\n\r\n  createRandomToken\r\n    .then(setRandomToken)\r\n    .then(sendForgotPasswordEmail)\r\n    .then(() => res.redirect('/login'))\r\n    .catch(next);\r\n};\r\n","/*\r\n * Constants Object\r\n * Convert miles to kilometers\r\n * Convert kilometers to miles\r\n * Header in travels.csv\r\n * Header in expenses.csv\r\n */\r\n\r\nmodule.exports = Object.freeze({\r\n    MILES_TO_KILOMETERS: 1.609344,\r\n    KILOMETERS_TO_MILES: 0.621371,\r\n    IMPORT_TRAVEL_HEADER: [\r\n        'dateFrom',\r\n        'dateTo',\r\n        'description',\r\n        'homeCurrency',\r\n        'perMileAmount',\r\n        'total'],\r\n    IMPORT_EXPENSE_HEADER: [ 'type',\r\n        'description',\r\n        'date',\r\n        'amount',\r\n        'currency',\r\n        'rate',\r\n        'amountConverted',\r\n        'unit',\r\n        'travelName',\r\n        'base'\r\n ]\r\n});\r\n","const expenseTypes = [\r\n  'Flight',\r\n  'Hotel',\r\n  'Mileage',\r\n  'Meal',\r\n  'Rent a car',\r\n  'Toll',\r\n  'Gas',\r\n  'Other'\r\n]\r\n\r\nconst allHtml = [\r\n  'a',\r\n  'abbr',\r\n  'acronym',\r\n  'address',\r\n  'applet',\r\n  'area',\r\n  'article',\r\n  'aside',\r\n  'travelButtonEditOptionsb',\r\n  'base',\r\n  'basefont',\r\n  'bdi',\r\n  'bdo',\r\n  'big',\r\n  'blockquote',\r\n  'body',\r\n  'br',\r\n  'button',\r\n  'canvas',\r\n  'caption',\r\n  'center',\r\n  'cite',\r\n  'code',\r\n  'col',\r\n  'colgroup',\r\n  'data',\r\n  'datalist',\r\n  'dd',\r\n  'details',\r\n  'dfn',\r\n  'dialog',\r\n  'dir',\r\n  'div',\r\n  'dl',\r\n  'dt',\r\n  'em',\r\n  'embed',\r\n  'fieldset',\r\n  'figcaption',\r\n  'figure',\r\n  'font',\r\n  'footer',\r\n  'form',\r\n  'frame',\r\n  'frameset',\r\n  'h1',\r\n  'h2',\r\n  'h3',\r\n  'h4',\r\n  'h5',\r\n  'h6',\r\n  'head',\r\n  'header',\r\n  'hr',\r\n  'html',\r\n  'i',\r\n  'iframe',\r\n  'img',\r\n  'input',\r\n  'ins',\r\n  'kbd',\r\n  'label',\r\n  'legend',\r\n  'li',\r\n  'link',\r\n  'main',\r\n  'map',\r\n  'mark',\r\n  'meta',\r\n  'meter',\r\n  'nav',\r\n  'noframes',\r\n  'noscript',\r\n  'object',\r\n  'ol',\r\n  'optgroup',\r\n  'option',\r\n  'output',\r\n  'p',\r\n  'param',\r\n  'picture',\r\n  'pre',\r\n  'progress',\r\n  'q',\r\n  'rp',\r\n  'rt',\r\n  'ruby',\r\n  's',\r\n  'samp',\r\n  'script',\r\n  'section',\r\n  'select',\r\n  'small',\r\n  'source',\r\n  'span',\r\n  'strike',\r\n  'strong',\r\n  'style',\r\n  'sub',\r\n  'summary',\r\n  'sup',\r\n  'svg',\r\n  'table',\r\n  'tbody',\r\n  'td',\r\n  'template',\r\n  'textarea',\r\n  'tfoot',\r\n  'th',\r\n  'thead',\r\n  'time',\r\n  'title',\r\n  'tr',\r\n  'track',\r\n  'tt',\r\n  'u',\r\n  'ul',\r\n  'var',\r\n  'video',\r\n  'wbr'\r\n]\r\n\r\nconst emptyHTML = [\r\n  'area',\r\n  'base',\r\n  'col',\r\n  'embed',\r\n  'hr',\r\n  'img',\r\n  'input',\r\n  'link',\r\n  'meta',\r\n  'param',\r\n  'source',\r\n  'track',\r\n  'wbr'\r\n];\r\n\r\nmodule.exports = {\r\n  expenseTypes,\r\n  allHtml,\r\n  emptyHTML\r\n}\r\n","/*\r\n * Currency Schema\r\n * base: base currency => to currency\r\n * date: conversion date\r\n * rate: object => key: from currency, value: conversion rate\r\n * timestamps: creates two values => createdAr, updatedAt - Mongoose Schema option\r\n *\r\n * amount in rate currency divide with rate[currency]\r\n * converted amount = (amount in rate's key)/(currency.rate[\"EUR\"])\r\n * EXAMPLE:\r\n * currency = {base: \"USD\", date: 2017-11-18T00:00:00.000+00:00, rate: {EUR: 0.89}}\r\n * convert 100 EUR to USD = 100/currency.rate[\"EUR\"]\r\n * 100 EUR = 100/0.89 = 112.36 USD\r\n */\r\nconst mongoose = require('mongoose');\r\n\r\nconst CurrencySchema = new mongoose.Schema({\r\n  base: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  date: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  rate: {\r\n    type: Object,\r\n    required: true\r\n  }\r\n}, {\r\n  timestamps: true\r\n});\r\n\r\nconst Currency = mongoose.model('Currency', CurrencySchema);\r\n\r\nmodule.exports = Currency;\r\n","/*\r\n * Expense Schema\r\n * travel: link to travel => travel._id from travels collection\r\n * type: possible expense type => ./lib/globals.expenseTypes\r\n * decription: expense description\r\n * date: expense date\r\n * currency: TODO implement validation => length=3 & make upper case\r\n * curRate: link to currency => currency._id from currencies collection\r\n * unit: only if expense type is Mileage based on user's unit(user.homeDistance) => userSchema in ./models/User.js\r\n * amount: amount spent in local currency or distance in unit\r\n * amountConverted: converted amount based on user's currency(homeCurrency) or user's per distance conversion(user.perMileAmount) => userSchema in ./models/User.js\r\n * _user: link to user => user._id from users collection\r\n */\r\nconst mongoose = require('mongoose');\r\nconst moment = require('moment');\r\nconst {User} = require('../models/User');\r\nconst {Travel} = require('../models/Travel');\r\nconst {Currency} = require('../models/Currency');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst ExpenseSchema = new mongoose.Schema({\r\n  travel: {\r\n    type: ObjectId,\r\n    required: true,\r\n    ref: 'Travel'\r\n  },\r\n  type: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  description: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  date: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  currency: {\r\n    type: String\r\n  },\r\n  curRate: {\r\n    type: ObjectId,\r\n    ref: 'Currency'\r\n  },\r\n  unit: {\r\n    type: String\r\n  },\r\n  amount: {\r\n    type: mongoose.Decimal128\r\n  },\r\n  amountConverted: {\r\n    type: mongoose.Decimal128,\r\n    default: 0.00\r\n  },\r\n  _user: {\r\n    type: ObjectId,\r\n    required: true,\r\n    ref: 'User'\r\n  }\r\n}, { timestamps: true });\r\n\r\nconst Expense = mongoose.model('Expense', ExpenseSchema);\r\n\r\nmodule.exports = Expense;\r\n","/*\r\n * Rates Schema\r\n * Same object as data from data.fixer.io\r\n * success: if response was successful\r\n * timestamp: when was data collected in Unix timestamp - multiple with 1000 to get time in milliseconds and then convert to date\r\n * base: for which currency are rates\r\n * rates: object with all rates to convert from => {USD: 1.12, HRK: 7.45, GBP: 0.88, ....}\r\n * timestamps: creates two values => createdAr, updatedAt - Mongoose Schema option\r\n */\r\nconst mongoose = require('mongoose');\r\n\r\nconst RateSchema = new mongoose.Schema({\r\n  success: Boolean,\r\n  timestamp: Number,\r\n  base: String,\r\n  date: Date,\r\n  rates: Object\r\n},\r\n  {timestamps: true}\r\n );\r\n\r\n/*\r\n * Returns array with rates between two dates.\r\n * keys: [rates, date]\r\n */\r\nRateSchema.statics.findRatesOnDate = function (travel, callback) {\r\n  return this.find({ $and: [ { date: { $gte: travel.dateFrom } }, { date: { $lte: travel.dateTo } } ] },  (err, rates) => {\r\n\r\n  }).select({'rates': 1, 'date': 1, '_id': 0},);\r\n\r\n}\r\n\r\n/*\r\n * Returns array with rate close to travel dates\r\n * Use in case there is no rate for date inbetween travel dates\r\n * Rates are sorted ascending.\r\n * Limit to only one rates object.\r\n * keys: [rates, date]\r\n * TODO check if you can get better algorithm\r\n */\r\nRateSchema.statics.findRateBeforeOrAfterDate = function (travel, callback) {\r\n  return this.find({$or: [ { date: { $gte: travel.dateFrom } }, { date: { $lte: travel.dateFrom } } ]}, (err, rates) => {\r\n\r\n  })\r\n  .sort({\"date\":1})\r\n  .limit(1)\r\n  .select({'rates': 1, 'date': 1, '_id': 0},);\r\n}\r\n\r\nconst Rate = mongoose.model('Rate', RateSchema);\r\n\r\nmodule.exports = Rate;\r\n","/*\r\n * Travel Schema\r\n * _user: link to user => user._id from users collection\r\n * decription: travel description\r\n * dateFrom: travel start date\r\n * dateTo: travel end date\r\n * homeCurrency: currency to calculate all amounts to\r\n * perMileAmount: amount to convert distance to expense\r\n * expenses: array of expense' ids - links to expenses collection in DB => ExpenseSchema in ./models/Expense.js\r\n * total: total of all expenes linked to this travel\r\n * useNestedStrict: TODO useNestedStrict description\r\n * timestamps: creates two values => createdAr, updatedAt - Mongoose Schema option\r\n */\r\n\r\nconst mongoose = require('mongoose');\r\n\r\nconst User = require('../models/User');\r\nconst Expense = require('../models/Expense');\r\n\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst TravelSchema = new mongoose.Schema({\r\n  _user: {\r\n    type: ObjectId,\r\n    required: true,\r\n    ref: 'User'\r\n  },\r\n  description: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  dateFrom: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  dateTo: {\r\n    type: Date,\r\n    required: true\r\n  },\r\n  homeCurrency: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  perMileAmount: {\r\n    type: mongoose.Decimal128,\r\n    default: 0.00\r\n  },\r\n  expenses: [{\r\n    type: ObjectId,\r\n    ref: 'Expense'\r\n  }],\r\n  total: {\r\n    type: mongoose.Decimal128,\r\n    default: 0.00\r\n  }\r\n}, {\r\n  useNestedStrict: true,\r\n  timestamps: true });\r\n\r\n/*\r\n * Helper method to update travel's total amount\r\n * Returns same document for which the total is calculated.\r\n * Before use you have to find document with populate expenses\r\n * EXAMPLE:\r\n * Travel\r\n * .findOne({_id: doc._id, _user: req.user.id})\r\n * .populate({path: 'expenses', populate: {path: 'curRate'}})\r\n * .then((doc) => {doc.updateTotal()}\r\n */\r\nTravelSchema.methods.updateTotal = function  (cb) {\r\n  this.total = 0;\r\n  this.expenses.forEach((expense) => {\r\n    this.total = Number(this.total) + Number(expense.amountConverted);\r\n  });\r\n  this.total = parseFloat(this.total).toFixed(2);\r\n  return this.save();\r\n}\r\n\r\nTravelSchema.statics.byYear_byMonth = function (user, cb) {\r\n  return this.aggregate([\r\n{\r\n  '$match': {\r\n    '_user': user._id\r\n  }\r\n}, {\r\n  '$sort': {\r\n    'dateFrom': -1\r\n  }\r\n}, {\r\n  '$lookup': {\r\n    from: 'expenses',\r\n    localField: 'expenses',\r\n    foreignField: '_id',\r\n    as: 'expenses'\r\n  }\r\n}, {\r\n  '$lookup': {\r\n    from: 'currencies',\r\n    localField: 'expenses.curRate',\r\n    foreignField: '_id',\r\n    as: 'curRates'\r\n  }\r\n}, {\r\n  '$group': {\r\n    '_id': {\r\n      'month': {\r\n        '$month': '$dateFrom'\r\n      },\r\n      'year': {\r\n        '$year': '$dateFrom'\r\n      }\r\n    },\r\n    'byMonth': {\r\n      '$push': '$$ROOT'\r\n    },\r\n    'count': {\r\n      '$sum': 1\r\n    },\r\n    'dateFirst': {\r\n      '$first': '$dateFrom'\r\n    },\r\n    'dateLast': {\r\n      '$last': '$dateFrom'\r\n    }\r\n  }\r\n},\r\n{ $sort : { 'dateFirst' : -1} },\r\n{\r\n  '$group': {\r\n    '_id': {\r\n      'year': {\r\n        '$year': '$dateFirst'\r\n      }\r\n    },\r\n    'byYear': {\r\n      '$push': '$$ROOT'\r\n    },\r\n    'count': {\r\n      '$sum': 1\r\n    },\r\n    'countTotal': {$sum: \"$count\"},\r\n    'dateFirst': {\r\n      '$first': '$dateFirst'\r\n    },\r\n    'dateLast': {\r\n      '$last': '$dateLast'\r\n    }\r\n  }\r\n},\r\n{ $sort : { 'dateFirst' : -1} }\r\n]);\r\n}\r\n\r\nTravelSchema.statics.byMonth = function (user, cb) {\r\n  return this.aggregate([\r\n    {\r\n      $match: {\r\n          _user: user._id\r\n        }\r\n      },\r\n      {\r\n        $group: {\r\n          _id: {\r\n            month: {$month: \"$dateFrom\"},\r\n            year: {$year: \"$dateFrom\"}\r\n          },\r\n          travels: {$addToSet: \"$_id\"},\r\n          myArray: {'$push': '$$ROOT'},\r\n          count: {$sum: 1},\r\n          date: {$first: \"$dateFrom\"}\r\n        }\r\n      },\r\n      {\r\n        $project: {\r\n          date: {$dateToString: {format: \"%Y-%m\",date: \"$date\"}},\r\n          travels: '$travels',\r\n          myArray: '$myArray',\r\n          count: 1,\r\n          _id: 0\r\n        }\r\n      }\r\n    ]\r\n  );\r\n}\r\n\r\nconst Travel = mongoose.model('Travel', TravelSchema);\r\n\r\nmodule.exports = Travel;\r\n","/*\r\n * User Schema\r\n * email: login email\r\n * password: login password\r\n * passwordResetToken: token send to user to reset the password\r\n * passwordResetExpires: when passwordResetToken expires\r\n * google: google id when user signin or link the account\r\n * tokens: array of tokens\r\n * profile: object with user's name, gender, location, website, picture, first name (fName), last name (lName)\r\n * team: user's team\r\n * jobPosition: user's job\r\n * travels: array of travel' ids - links to travels collection in DB => TravelSchema in ./models/Expense.js\r\n * homeCurrency: currency to calculate all amounts to\r\n * homeDistance: to which linear measure expense will be calculate to: miles(mi) or kilometers(km)\r\n * perMileAmount: amount to convert distance to expense\r\n * timestamps: creates two values => createdAr, updatedAt - Mongoose Schema option\r\n */\r\n\r\nconst bcrypt = require('bcrypt-nodejs');\r\nconst crypto = require('crypto');\r\nconst mongoose = require('mongoose');\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: { type: String, unique: true },\r\n  password: String,\r\n  passwordResetToken: String,\r\n  passwordResetExpires: Date,\r\n\r\n  google: String,\r\n  tokens: Array,\r\n\r\n  profile: {\r\n    name: String,\r\n    gender: String,\r\n    location: String,\r\n    website: String,\r\n    picture: String,\r\n    fName: String,\r\n    lName: String\r\n  },\r\n  team: {\r\n    type: String,\r\n    maxlength: 30\r\n  },\r\n  jobPosition: {\r\n    type: String,\r\n    maxlength: 30\r\n  },\r\n  travels: Array,\r\n  homeCurrency: {\r\n    type: String,\r\n    default: 'USD'\r\n  },\r\n  homeDistance: {\r\n    type: String,\r\n    default: 'mi'\r\n  },\r\n  perMileAmount: {\r\n    type: Number,\r\n    default: 0.54\r\n  },\r\n}, { timestamps: true });\r\n\r\n/**\r\n * Password hash middleware.\r\n */\r\nuserSchema.pre('save', function save(next) {\r\n  const user = this;\r\n  if (!user.isModified('password')) { return next(); }\r\n  bcrypt.genSalt(10, (err, salt) => {\r\n    if (err) { return next(err); }\r\n    bcrypt.hash(user.password, salt, null, (err, hash) => {\r\n      if (err) { return next(err); }\r\n      user.password = hash;\r\n      next();\r\n    });\r\n  });\r\n});\r\n\r\n/**\r\n * Helper method for validating user's password.\r\n */\r\nuserSchema.methods.comparePassword = function comparePassword(candidatePassword, cb) {\r\n  bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\r\n    cb(err, isMatch);\r\n  });\r\n};\r\n\r\n/**\r\n * Helper method for getting user's gravatar.\r\n */\r\nuserSchema.methods.gravatar = function gravatar(size) {\r\n  if (!size) {\r\n    size = 200;\r\n  }\r\n  if (!this.email) {\r\n    return `https://gravatar.com/avatar/?s=${size}&d=retro`;\r\n  }\r\n  const md5 = crypto.createHash('md5').update(this.email).digest('hex');\r\n  return `https://gravatar.com/avatar/${md5}?s=${size}&d=retro`;\r\n};\r\n\r\n/**\r\n* Helper method for getting user's full name\r\n*/\r\nuserSchema.methods.fullName = function fullName() {\r\n  const result = this.profile.fName + ' ' + this.profile.lName;\r\n  return result;\r\n}\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nmodule.exports = User;\r\n","const axios = require('axios');\r\nconst schedule = require('node-schedule');\r\nconst moment = require('moment');\r\nconst Rate = require('../models/Rate');\r\n\r\n/*\r\n * Retrieve rates from data.fixer.io and save it to DB\r\n * @param {string} today                    Now YYYY-MM-DD format\r\n * @param {object} response                 Axios response from data.fixer.io/api/latest\r\n * @param {boolean} response.data.success\r\n * @param {number} response.data.timestamp\r\n * @param {string} response.data.base       Base currency - 3 capital letters\r\n * @param {string} response.data.date       Date for rates\r\n * @param {object} response.data.rates      Object with keys as rates (3 capital letters), values as rate\r\n * @param {object} data                     Mongoose Rate model - see /models/Rate.js\r\n */\r\nconst dataFixier = async () => {\r\n  try {\r\n    const response = await axios.get(`http://data.fixer.io/api/latest?access_key=${process.env.DATA_FIXER_IO}`);\r\n    if (response.data.success && moment(response.data.date).format('YYYY-MM-DD') === moment().format('YYYY-MM-DD')) {\r\n      const data = new Rate(response.data);\r\n      await data.save().then((rates) => {\r\n        console.log(`Rates for ${moment(rates.date)},\\ncollected on ${new Date(rates.timestamp*1000)},\\ncreated on ${moment(rates.createdAt)}`);\r\n      });\r\n    } else if (moment(response.data.date).format('YYYY-MM-DD') != moment().format('YYYY-MM-DD')) {\r\n      console.log(`Wrong response data date: ${moment(response.data.date).format('YYYY-MM-DD')} - Should be ${moment().format('YYYY-MM-DD')}`);\r\n    } else {\r\n        console.log(`Could't get rates from data.fixer.io`);\r\n        console.log(response.data);\r\n    }\r\n  } catch (err) {\r\n    throw new Error(err);\r\n  }\r\n}\r\n\r\n/*\r\n * @typedef Rate\r\n * @param {boolean} success\r\n * @param {number} timestamp\r\n * @param {string} base\r\n * @param {string} date\r\n * @param {object} rates\r\n */\r\n\r\n/*\r\n * Check if today rates alredy exists in DB, resolve as array of rates documents(objects), reject as error\r\n * @param {string} today Now YYYY-MM-DD format\r\n * @param {object} rates Info about rates or error\r\n * @return Promise<Rate> Array of MongoDB documents\r\n */\r\nconst checkDbForTodayRates = new Promise(async function(resolve, reject) {\r\n  const today = moment(new Date()).format('YYYY-MM-DD');\r\n  try {\r\n    const rates = await Rate.find({date: today});\r\n    resolve(rates);\r\n  } catch (err) {\r\n    reject(err);\r\n  }\r\n});\r\n\r\n/*\r\n * getRates module\r\n * const getRates = require(./getRates)\r\n * Use it once after connectef to DB - getRates()\r\n * It checks imediatelly if for today document exists in database and\r\n * creates new node-schedule job to repeat every first minute in the hour\r\n * module: utils/getRates\r\n * @param {string} today Now YYYY-MM-DD format\r\n */\r\n\r\n/** GET RATES FROM DATA.FIXER.IO/API. */\r\nmodule.exports = async () => {\r\n  const today = moment().format('YYYY-MM-DD');\r\n  checkDbForTodayRates.then((rates) => {\r\n    if (rates.length === 0) {\r\n      console.log(`${moment(new Date())} - Rates for ${today} not yet in DB. Retrieving rates...`);\r\n      dataFixier();\r\n    } else {\r\n      console.log(`${moment(new Date())} - Rates for ${today} already in DB`);\r\n    }\r\n  }).catch( err => {\r\n      console.log(err);\r\n  });\r\n\r\n  const rule = new schedule.RecurrenceRule();\r\n  rule.minute = 1;\r\n\r\n  const job = schedule.scheduleJob(rule, function() {\r\n    const today = moment().format('YYYY-MM-DD');\r\n    try {\r\n      const rates = checkDbForTodayRates;\r\n      if (rates.length === 0) {\r\n        console.log(`${moment(new Date())} - Rates for ${today} not yet in DB. Retrieving rates...`);\r\n        dataFixier();\r\n      } else {\r\n        console.log(`${moment(new Date())} - Rates for ${today} already in DB`);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  });\r\n}\r\n","const expressHbs = require('express-hbs');\r\nconst moment = require('moment');\r\nconst createElement = require('../utils').createElement;\r\n\r\nexpressHbs.registerHelper('flash', (message) => {\r\n  if (message.error) {\r\n    return message.error;\r\n  }\r\n  if (message.info) {\r\n    return message.info;\r\n  }\r\n  if (message.success) {\r\n    return message.success;\r\n  }\r\n\r\n})\r\n\r\n// expressHbs.registerHelper('gravatar', (user) => {\r\n//   return user.gravatar(60);\r\n// })\r\n\r\nexpressHbs.registerHelper('debug', function(data, breakpoint) {\r\n  console.log(data);\r\n  if (breakpoint === true) {\r\n    debugger;\r\n  }\r\n  return '';\r\n});\r\n\r\nexpressHbs.registerHelper('gender', (userGender, radioButtonGender) => {\r\n  return userGender == radioButtonGender;\r\n})\r\n\r\nexpressHbs.registerHelper (\"setChecked\", function (value, currentValue) {\r\n    if ( value == currentValue ) {\r\n       return \"checked\";\r\n    } else {\r\n       return \"\";\r\n    }\r\n });\r\n\r\n expressHbs.registerHelper(\"setOption\", (value, currentValue) => {\r\n   if (value == currentValue) {\r\n     return \"selected='selected'\";\r\n   } else {\r\n     return;\r\n   }\r\n })\r\n\r\n expressHbs.registerHelper('setValue', (value) => {\r\n   return `value=${value}`;\r\n })\r\n\r\n expressHbs.registerHelper('countList', (value) => {\r\n   return value + 1;\r\n })\r\n\r\n expressHbs.registerHelper('formatDate', (date) => {\r\n   if (!date) {\r\n     const today = moment().format('YYYY-MM-DD');\r\n     return today;\r\n   }\r\n   else {\r\n     const today = moment(date).format('YYYY-MM-DD');\r\n     return today;\r\n   }\r\n });\r\n\r\n expressHbs.registerHelper('formatMonth', (date) => {\r\n   if (!date) {\r\n     const today = moment().format('MMMM, YYYY');\r\n     return today;\r\n   }\r\n   else {\r\n     const today = moment(date).format('MMMM, YYYY');\r\n     return today;\r\n   }\r\n })\r\n\r\n expressHbs.registerHelper('travelsList', function(items, options) {\r\n  let out = \"<ul>\";\r\n\r\n  for(let i=0, length=items.length; i<length; i++) {\r\n    out = out + \"<li>\" + options.fn(items[i]) + \"</li>\";\r\n  }\r\n\r\n  return out + \"</ul>\";\r\n});\r\n\r\nexpressHbs.registerHelper('setUnit', (homeDistance) => {\r\n  if (homeDistance === 'mi') {\r\n      return 'mile';\r\n    } else if (homeDistance === 'km') {\r\n      return 'km';\r\n    } else {\r\n      return '';\r\n    }\r\n});\r\n\r\nexpressHbs.registerHelper('setUnit2', (homeDistance) => {\r\n  if (homeDistance != 'mi') {\r\n      return 'mile';\r\n    } else if (homeDistance != 'km') {\r\n      return 'km';\r\n    } else {\r\n      return '';\r\n    }\r\n});\r\n\r\nexpressHbs.registerHelper('toNumber' , (valueAsString) => {\r\n  return parseFloat(valueAsString);\r\n});\r\n\r\nexpressHbs.registerHelper('getRate', (travelCurrencies, currency) => {\r\n  const item = travelCurrencies.find((item) => {\r\n    return item.currency.name === currency;\r\n  });\r\n  return item.value;\r\n});\r\n\r\nexpressHbs.registerHelper('toCurrency', (number) => {\r\n  const formatter = new Intl.NumberFormat('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\r\n  let numberString = formatter.format(number);\r\n  return numberString;\r\n});\r\n","const expressHbs = require('express-hbs');\r\nconst moment = require('moment');\r\nconst createElement = require('../utils').createElement;\r\nconst createTwoCardElements = require('../utils').createTwoCardElements;\r\nconst {expenseTypes} = require('../../lib/globals');\r\nconst constants = require('../../lib/constants');\r\n\r\n/*\r\n * Returns expense curRate object-\r\n * @param {object} travel\r\n * @param {object} expense\r\n *\r\n * Could't populate on travel aggregate expense curRate.\r\n * Travel Object has new array with unique curRate objects.\r\n */\r\nconst findCurRate = (travel, expense) => {\r\n  let currency_unit, curRate\r\n  if (expense.type != 'Mileage') {\r\n    currency_unit = expense.currency;\r\n    curRate = travel.curRates.find((cr) => {\r\n      return cr._id.toString() === expense.curRate.toString();\r\n    });\r\n  } else {\r\n    curRate = false;\r\n  }\r\n  return curRate;\r\n}\r\n\r\n/*\r\n * Creates HTML 'option' elements\r\n * @param {array} options            Select or datalist options\r\n * @param {string} selected           Option to be selected\r\n * @param {object} elemAttrs          HTML element attributes\r\n * @param {boolean} valueToLowerCase  whether to set option's value to lower case\r\n *\r\n */\r\nconst createSelectOptions = (options, selected, elemAttrs={}, valueToLowerCase = false) => {\r\n  let result = '';\r\n  selected = (!selected) ? '' : selected;\r\n  options.forEach((val) => {\r\n    // console.log(val);\r\n    const optionVal = (valueToLowerCase) ? val.toLowerCase() : val;\r\n    // console.log(optionVal, val, selected);\r\n    elemAttrs.value = optionVal;\r\n    if (optionVal.toLowerCase() === selected.toLowerCase()) {\r\n      elemAttrs.selected = 'selected';\r\n    };\r\n    const htmlElem = createElement('option', elemAttrs, val);\r\n    if (elemAttrs.selected) {\r\n      delete elemAttrs.selected;\r\n    }\r\n    result = result + htmlElem;\r\n  });\r\n  delete elemAttrs.value;\r\n  return result;\r\n}\r\n\r\nconst createFormRow = () => {\r\n\r\n}\r\n\r\nconst createExpenseForm = (method='POST', hiddenMethod=method, csrf='', expenseTypes={}, travel, expense, formatter) => {\r\n  if (!travel || !expense) {\r\n    return;\r\n  }\r\n\r\n  const curRate = findCurRate(travel, expense);\r\n  const mileage = (expense.type === 'Mileage') ? true : false;\r\n\r\n  method = method.toUpperCase();\r\n  hiddenMethod = hiddenMethod.toUpperCase();\r\n\r\n\r\n  // hidden INPUT OPTIONS\r\n    const hiddenInputOptions = {\r\n      type: 'hidden',\r\n      name: '_csrf',\r\n      value: csrf\r\n    };\r\n\r\n  // div row OPTIONS\r\n  const divRowOptions = {class: 'form-group my-1', style: ''};\r\n  const divElemOptions = {};\r\n\r\n  // label TAGS & OPTIONS, form elements OPTIONS\r\n  const htmlLabelTagsArr = ['small', 'label'];\r\n  const labelTextOptions = {class:'form-label'};\r\n  const labelOptions = {class: ['text-warning', 'mb-0']};\r\n  const htmlLabelOptionsArr = [labelTextOptions, labelOptions];\r\n  const elemOptions = {\r\n    class: ['form-control', 'mb-1', 'bg-secondary', 'text-white', 'text-right'],\r\n    autofocus: 'autofocus',\r\n    required: 'required',\r\n    style: '',\r\n    readonly: 'readonly',\r\n  };\r\n\r\n  // ALWAYS SHOW\r\n  // EXPENSE.TYPE - HTML SELECT\r\n  // expense type INPUT OPTIONS\r\n  labelOptions.for =  `expenseType${expense._id}`;\r\n  elemOptions.id = `expenseType${expense._id}`;\r\n  elemOptions.name = 'expenseType';\r\n  elemOptions.autocomplete = 'expenseType';\r\n\r\n  // expense type INPUT TAGS & OPTONS\r\n  const htmlTagsArr = htmlLabelTagsArr.concat(['select']);\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  const htmlOptionsArr = htmlLabelOptionsArr.concat([elemOptions]);\r\n\r\n  // expense type INPUT ELEMENT\r\n  const typeOptionElem = createSelectOptions(expenseTypes, expense.type);\r\n  const typeElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Type', typeOptionElem]);\r\n  const typeElemDiv = createElement('div', divElemOptions, typeElem);\r\n  const typeElemRow = createElement('div', divRowOptions, typeElemDiv);\r\n  delete elemOptions.autocomplete;\r\n\r\n  // EXPENSE.DESCRIPTION - HTML INPUT text\r\n  // expense description INPUT OPTIONS\r\n  labelOptions.for =  `expenseDescription${expense._id}`;\r\n  elemOptions.type = 'text';\r\n  elemOptions.id = `expenseDescription${expense._id}`;\r\n  elemOptions.name = 'expenseDescription';\r\n  elemOptions.autocomplete = 'expenseDescription';\r\n  elemOptions.value = expense.description;\r\n\r\n  // expense description INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const descriptionClosingTags = [true, true, false];\r\n\r\n  // expense description INPUT ELEMENT\r\n  const descriptionElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Description', ''], descriptionClosingTags);\r\n  const descriptionElemDiv = createElement('div', divElemOptions, descriptionElem);\r\n  const descriptionElemRow = createElement('div', divRowOptions, descriptionElemDiv);\r\n  delete elemOptions.value;\r\n  delete elemOptions.type;\r\n\r\n  // EXPENSE.DATE - HTML INPUT date\r\n  // expense date INPUT OPTIONS\r\n  labelOptions.for =  `invoiceDate${expense._id}`;\r\n  elemOptions.type = 'date';\r\n  elemOptions.id = `invoiceDate${expense._id}`;\r\n  elemOptions.name = 'invoiceDate';\r\n  elemOptions.autocomplete = 'invoiceDate';\r\n  elemOptions.value = moment(expense.date).format('YYYY-MM-DD');\r\n  elemOptions.min = moment(travel.dateFrom).format('YYYY-MM-DD');\r\n  elemOptions.max = moment(travel.dateTo).format('YYYY-MM-DD');\r\n  // elemOptions.style =  elemOptions.style + '-webkit-text-fill-color: white;';\r\n\r\n  // expense date INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const dateClosingTags = [true, true, false];\r\n\r\n  // expense date INPUT ELEMENT\r\n  const dateElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Date', ''], dateClosingTags);\r\n  const dateElemDiv = createElement('div', divElemOptions, dateElem)\r\n  const dateElemRow = createElement('div', divRowOptions, dateElemDiv);\r\n  delete elemOptions.value;\r\n  delete elemOptions.type;\r\n  delete elemOptions.min;\r\n  delete elemOptions.max;\r\n  // elemOptions.style.replace('-webkit-text-fill-color: white;', '');\r\n\r\n  // NOT MILEAGE\r\n  // EXPENSE.CURRENCY - HTML INPUT text\r\n  // expense currency INPUT OPTIONS\r\n  labelOptions.for =  `invoiceCurrency${expense._id}`;\r\n  elemOptions.class.push('text-to-upper');\r\n  elemOptions.type = 'text';\r\n  elemOptions.id = `invoiceCurrency${expense._id}`;\r\n  elemOptions.list = `currencies${expense._id}`;\r\n  elemOptions.name = 'invoiceCurrency';\r\n  elemOptions.autocomplete = 'invoiceCurrency';\r\n  elemOptions.placeholder = 'USD';\r\n  elemOptions.minLength = '3';\r\n  elemOptions.maxlength = '3';\r\n  elemOptions.value = (!mileage) ? expense.currency : '';\r\n  elemOptions.required = (!mileage) ? 'required' : '';\r\n\r\n  // expense currency INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const currencyClosingTags = [true, true, false];\r\n\r\n  const currencyOptionElem = createSelectOptions(['USD', 'EUR', 'RSD', 'HRK', 'BAM'], elemOptions.value, {class: 'currency'});\r\n  const currencyDatalistElem = createElement('datalist', {class: 'currencies', id: `currencies${expense._id}`}, currencyOptionElem);\r\n  const currencyElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Currency', currencyDatalistElem], currencyClosingTags);\r\n  const currencyElemDiv = createElement('div', divElemOptions, currencyElem);\r\n  const currencyElemRow = createElement('div', divRowOptions, currencyElemDiv);\r\n  elemOptions.class.pop();\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.minLength;\r\n  delete elemOptions.maxlength;\r\n  delete elemOptions.value;\r\n  elemOptions.required = 'required';\r\n\r\n  // EXPENSE.RATE - HTML INPUT number\r\n  // expense rate INPUT OPTIONS\r\n  labelOptions.for =  `rate${expense._id}`;\r\n  elemOptions.type = 'number';\r\n  elemOptions.id = `rate${expense._id}`;\r\n  elemOptions.name = 'rate';\r\n  elemOptions.autocomplete = 'rate';\r\n  elemOptions.step = '0.01';\r\n  elemOptions.placeholder = '0.00';\r\n  elemOptions.value = (!mileage) ? curRate.rate[expense.currency].toString() : '';\r\n  elemOptions.min = 0;\r\n  // divRowOptions.style = `display: ${(mileage) ? 'none' : 'initial'}`;\r\n\r\n  // expense rate INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const rateClosingTags = [true, true, false];\r\n\r\n  const rateElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Rate', ''], rateClosingTags);\r\n  const rateElemDiv = createElement('div', divElemOptions, rateElem);\r\n  const rateElemRow = createElement('div', divRowOptions, rateElemDiv);\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.step;\r\n  delete elemOptions.min;\r\n  delete elemOptions.value;\r\n  // delete divRowOptions.style;\r\n\r\n  // EXPENSE.AMOUNT - HTML INPUT number\r\n  // expense amount INPUT OPTIONS\r\n  labelOptions.for =  `amount${expense._id}`;\r\n  elemOptions.type = 'number';\r\n  elemOptions.id = `amount${expense._id}`;\r\n  elemOptions.name = 'amount';\r\n  elemOptions.autocomplete = 'amount';\r\n  elemOptions.step = '0.01';\r\n  elemOptions.placeholder = '0.00';\r\n  elemOptions.value = (!mileage) ? Number(expense.amount).toFixed(2) : '';\r\n  elemOptions.min = 0;\r\n\r\n  // expense amount INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const amountClosingTags = [true, true, false];\r\n\r\n  const amountElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Amount', ''], amountClosingTags);\r\n  const amountElemDiv = createElement('div', divElemOptions, amountElem);\r\n  const amountElemRow = createElement('div', divRowOptions, amountElemDiv);\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.step;\r\n  delete elemOptions.min;\r\n  delete elemOptions.value;\r\n\r\n  // EXPENSE.AMOUNTCONVERTED - HTML INPUT number\r\n  // expense amountConverted INPUT OPTIONS\r\n  labelOptions.for =  `amountConverted${expense._id}`;\r\n  labelOptions.class.push('input-group');\r\n  elemOptions.type = 'number';\r\n  elemOptions.id = `amountConverted${expense._id}`;\r\n  elemOptions.name = 'amountConverted';\r\n  elemOptions.autocomplete = 'amountConverted';\r\n  elemOptions.placeholder = '0.00';\r\n  elemOptions.value = (!mileage) ? Number(expense.amountConverted).toFixed(2) : '';\r\n  elemOptions.min = 0;\r\n  elemOptions.class.push('input-group');\r\n  elemOptions.readonly = 'readonly';\r\n  divElemOptions.class = ['input-group'];\r\n\r\n  // expense amountConverted INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const amountConvertedClosingTags = [true, true, false];\r\n  const prependElemSpan = createElement('span', {class: 'input-group-text mb-1 text-white bg-secondary', id: `currency-addon${expense._id}`}, travel.homeCurrency);\r\n  const prependElemDiv = createElement('div', {class: 'input-group-prepend'}, prependElemSpan);\r\n\r\n  const amountConvertedElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Amount Converted', ''], amountConvertedClosingTags, prependElemDiv);\r\n  const amountConvertedElemDiv = createElement('div', divElemOptions, amountConvertedElem);\r\n  const amountConvertedElemRow = createElement('div', divRowOptions, amountConvertedElemDiv);\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.min;\r\n  delete elemOptions.value;\r\n  elemOptions.class.pop();\r\n  delete elemOptions.readonly;\r\n  delete divElemOptions.class;\r\n\r\n  const notMileageDivOptions = {\r\n    class: '', id: `notMileage${expense._id}`,\r\n    style: `display: ${(mileage) ? 'none' : 'initial'}`\r\n  }\r\n\r\n  // MILEAGE\r\n  const aDistanceId = `amountDistance${expense._id}`;\r\n  const aDistance2Id = `amountDistance2${expense._id}`;\r\n  const aDistanceRowId =  `amountDistanceRow${expense._id}`;\r\n  const aDistanceRow2Id =  `amountDistance2Row${expense._id}`;\r\n\r\n  // EXPENSE.UNIT - HTML SELECT\r\n  labelOptions.for =  `invoiceUnit${expense._id}`;\r\n  elemOptions.id = `invoiceUnit${expense._id}`;\r\n  elemOptions.name = 'invoiceUnit';\r\n  elemOptions.autocomplete = 'invoiceUnit';\r\n  elemOptions.onchange = 'invoiceUnitChange(event)';\r\n\r\n\r\n  // expense type INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'select';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n\r\n  // expense type INPUT ELEMENT\r\n  const unitOptionElem = createSelectOptions(['mi', 'km'], expense.unit);\r\n  const unitElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Unit', unitOptionElem]);\r\n  const unitElemDiv = createElement('div', divElemOptions, unitElem);\r\n  const unitElemRow = createElement('div', divRowOptions, unitElemDiv);\r\n  delete elemOptions.autocomplete;\r\n  delete elemOptions.onchange;\r\n\r\n\r\n  // EXPENSE.PERMILEAMOUNT - HTML INPUT number\r\n  labelOptions.for =  `travelPerMileAmount${expense._id}`;\r\n  elemOptions.id = `travelPerMileAmount${expense._id}`;\r\n  elemOptions.name = 'travelPerMileAmount';\r\n  elemOptions.autocomplete = 'travelPerMileAmount';\r\n  elemOptions.type = 'number';\r\n  elemOptions.value = (mileage) ? Number(travel.perMileAmount).toFixed(2) : '';\r\n  elemOptions.step = '0.01';\r\n  elemOptions.min = 0;\r\n  elemOptions.placeholder = '0.00';\r\n  elemOptions.readonly = 'readonly';\r\n\r\n\r\n  // expense type INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n\r\n  // expense type INPUT ELEMENT\r\n  // TODO link userHomeDistance to user model\r\n  const userHomeDistance = 'mi';\r\n  const labelPerMileAmountText = `${travel.homeCurrency}/${userHomeDistance}`\r\n  const perMileAmountElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, [labelPerMileAmountText, '']);\r\n  const perMileAmountElemDiv = createElement('div', divElemOptions, perMileAmountElem);\r\n  const perMileAmountElemRow = createElement('div', divRowOptions, perMileAmountElemDiv);\r\n  delete elemOptions.autocomplete;\r\n  delete elemOptions.type;\r\n  delete elemOptions.value;\r\n  delete elemOptions.step;\r\n  delete elemOptions.min;\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.readonly;\r\n\r\n  // EXPENSE.AMOUNTDISTANCE - HTML INPUT number\r\n  labelOptions.for =  `amountDistance${expense._id}`;\r\n  elemOptions.id = `amountDistance${expense._id}`;\r\n  elemOptions.name = 'amountDistance';\r\n  elemOptions.autocomplete = 'amountDistance';\r\n  elemOptions.type = 'number';\r\n  elemOptions.value = (mileage) ? Number(expense.amount).toFixed(2) : '';\r\n  elemOptions.step = '0.01';\r\n  elemOptions.min = 0;\r\n  elemOptions.placeholder = '0.00';\r\n  divRowOptions.id = aDistanceRowId;\r\n\r\n  // expense type INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n\r\n  // expense type INPUT ELEMENT\r\n  const labelAmountDistanceText = `Distance[${userHomeDistance}]`\r\n  const amountDistanceElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, [labelAmountDistanceText, '']);\r\n  const amountDistanceElemDiv = createElement('div', divElemOptions, amountDistanceElem);\r\n  const amountDistanceElemRow = createElement('div', divRowOptions, amountDistanceElemDiv);\r\n  delete elemOptions.autocomplete;\r\n  delete elemOptions.type;\r\n  delete elemOptions.value;\r\n  delete elemOptions.step;\r\n  delete elemOptions.min;\r\n  delete elemOptions.placeholder;\r\n  delete divRowOptions.id;\r\n\r\n  // EXPENSE.AMOUNTCONVERTED2 - HTML INPUT number\r\n  // expense amountConverted2 INPUT OPTIONS\r\n  labelOptions.for =  `amountConverted2${expense._id}`;\r\n  labelOptions.class.push('input-group');\r\n  elemOptions.type = 'number';\r\n  elemOptions.id = `amountConverted2${expense._id}`;\r\n  elemOptions.name = 'amountConverted2';\r\n  elemOptions.autocomplete = 'amountConverted2';\r\n  elemOptions.placeholder = '0.00';\r\n  elemOptions.value = (mileage) ? Number(expense.amountConverted).toFixed(2) : '';\r\n  elemOptions.min = 0;\r\n  elemOptions.class.push('input-group');\r\n  elemOptions.readonly = 'readonly';\r\n  divElemOptions.class = ['input-group'];\r\n\r\n  // expense amountConverted INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n  const amountConverted2ClosingTags = [true, true, false];\r\n  const prependElemSpan2 = createElement('span', {class: 'input-group-text mb-1 text-white bg-secondary', id: `currency-addon2${expense._id}`}, travel.homeCurrency);\r\n  const prependElemDiv2 = createElement('div', {class: 'input-group-prepend'}, prependElemSpan2);\r\n\r\n  const amountConverted2Elem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Amount Converted', ''], amountConverted2ClosingTags, prependElemDiv2);\r\n  const amountConverted2ElemDiv = createElement('div', divElemOptions, amountConverted2Elem);\r\n  const amountConverted2ElemRow = createElement('div', divRowOptions, amountConverted2ElemDiv);\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.min;\r\n  delete elemOptions.value;\r\n  elemOptions.class.pop();\r\n  delete elemOptions.readonly;\r\n  delete divElemOptions.class;\r\n\r\n  // EXPENSE.AMOUNTDISTANCE2 - HTML INPUT number\r\n  const userHomeDistance2 = (userHomeDistance === 'mi') ? 'km' : 'mi';\r\n  labelOptions.for =  `amountDistance2${expense._id}`;\r\n  elemOptions.id = `amountDistance2${expense._id}`;\r\n  elemOptions.name = 'amountDistance2';\r\n  elemOptions.autocomplete = 'amountDistance2';\r\n  elemOptions.type = 'number';\r\n  // elemOptions.value = (mileage) ? Number(expense.amount).toFixed(2) : '';\r\n  elemOptions.step = '0.01';\r\n  elemOptions.min = 0;\r\n  elemOptions.placeholder = '0.00';\r\n  elemOptions.readonly = 'readonly';\r\n  divRowOptions.style = divRowOptions.style + 'display: none;'\r\n  divRowOptions.id = aDistanceRow2Id;\r\n\r\n\r\n  // expense type INPUT TAGS & OPTONS\r\n  htmlTagsArr[2] = 'input';\r\n  htmlLabelOptionsArr[1] = labelOptions;\r\n  htmlOptionsArr[2] = elemOptions;\r\n\r\n  // expense type INPUT ELEMENT\r\n  const labelAmountDistance2Text = `Distance[${userHomeDistance2}]`\r\n  const amountDistance2Elem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, [labelAmountDistance2Text, '']);\r\n  const amountDistance2ElemDiv = createElement('div', divElemOptions, amountDistance2Elem);\r\n  const amountDistance2ElemRow = createElement('div', divRowOptions, amountDistance2ElemDiv);\r\n  delete elemOptions.autocomplete;\r\n  delete elemOptions.type;\r\n  // delete elemOptions.value;\r\n  delete elemOptions.step;\r\n  delete elemOptions.min;\r\n  delete elemOptions.placeholder;\r\n  delete elemOptions.readonly;\r\n  divRowOptions.style.replace('display: none;', '');\r\n  delete divRowOptions.id;\r\n\r\n  const expenseButtonEditOptions = {\r\n    class: ['badge', 'badge-secondary', 'text-white'],\r\n    type: 'button',\r\n    onclick: `editExpense(event)`\r\n  }\r\n  const expenseButtonElemOptions = {class: 'mb-0 d-inline mx-1'};\r\n  const expenseButtonEditText = createElement('button', expenseButtonEditOptions, 'edit');\r\n  const expenseButtonEditElem = createElement('h6', expenseButtonElemOptions, expenseButtonEditText);\r\n\r\n\r\n\r\n\r\n  const mileageDivOptions = {\r\n    class: '', id: `mileage${expense._id}`,\r\n    style: `display: ${(mileage) ? 'initial' : 'none'}`\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const formOptions = {\r\n    action: `/travels/${travel._id}/expenses/${expense._id}`,\r\n    method,\r\n    id: `expenseForm${expense._id}`\r\n  };\r\n\r\n  const hiddenInput = createElement('input', hiddenInputOptions, '', false);\r\n  const alwaysShowElem = typeElemRow + descriptionElemRow + dateElemRow;\r\n  const formAlwaysShowDiv = createElement('div', {class: '', id: `alwaysShow${expense._id}`}, alwaysShowElem);\r\n  const formNotMIleageElem = currencyElemRow + rateElemRow + amountElemRow + amountConvertedElemRow;\r\n  const formNotMileageDiv = createElement('div', notMileageDivOptions, formNotMIleageElem);\r\n  const formMileageElem = unitElemRow + perMileAmountElemRow + amountDistanceElemRow + amountDistance2ElemRow + amountConverted2ElemRow;\r\n  const formMileageDiv = createElement('div', mileageDivOptions, formMileageElem);\r\n  const formElements = hiddenInput + formAlwaysShowDiv + formNotMileageDiv + formMileageDiv + expenseButtonEditElem;\r\n  const form = createElement('form', formOptions, formElements);\r\n  return form;\r\n}\r\n/*\r\n * Returns HTML elements\r\n * @param {object} value Array with travels mongo aggregate group by year and each year group by month\r\n * more in Travel Schema /models/Travel.js Travel.byYear_byMonth\r\n */\r\nexpressHbs.registerHelper('yearsAccordionWithForm', (value, csrf) => {\r\n\r\n  const formatter = new Intl.NumberFormat('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\r\n  // HTML Accordion - RESULT\r\n  const yearObjectsArray = [];\r\n  value.forEach((yearObject) => {\r\n    const yearString = yearObject._id.year.toString();\r\n    // HTML Year Card COLLAPSE - BODY\r\n    const monthObjectsArray = [];\r\n    yearObject.byYear.forEach((monthObject) => {\r\n      const monthValue = monthObject._id.month-1;\r\n      const monthString = moment().month(monthValue).format('MMMM');\r\n      const travelObjectsArray = [];\r\n      // HTML Month Card COLLAPSE - BODY\r\n      monthObject.byMonth.forEach((travelObject) => {\r\n        const dateFromString = moment(travelObject.dateFrom).format('YYYY-MM-DD');\r\n        const travelId = travelObject._id;\r\n        const expensesCount = travelObject.expenses.length;\r\n        const hrefTravel = `/travels/${travelId}`;\r\n        const homeCurrency = travelObject.homeCurrency;\r\n        const totalString = `${formatter.format(travelObject.total)} ${homeCurrency}`;\r\n        const travelHeaderTextString =  `${dateFromString} ${travelObject.description} ${totalString}`;\r\n        // HTML Travel Card COLLAPSE - BODY\r\n        const expenseObjectsArray = [];\r\n        travelObject.expenses.forEach((expenseObject) => {\r\n          const expenseId = expenseObject._id;\r\n\r\n          const expenseCardBodyOptions = {class:'card-body', id:`heading${expenseId}_CardBody`};\r\n          const expenseCardOptions = {class:['card', 'text-white', 'bg-secondary', 'mx-2', 'my-2', 'border-warning'], id:`expense_${expenseId}_Card`};\r\n\r\n\r\n          const form = createExpenseForm('post', 'patch', csrf, expenseTypes, travelObject, expenseObject, formatter);\r\n          const expenseCardBody = createElement('div', expenseCardBodyOptions,  form);\r\n          const expenseCard = createElement('div', expenseCardOptions,  expenseCardBody);\r\n          expenseObjectsArray.push(expenseCard);\r\n        });\r\n        const expenses = expenseObjectsArray.join('')\r\n        // HTML Travel Card ELEMENTS OPTIONS\r\n        const travelButtonBadgeOptions = {class: 'badge badge-warning mx-1'};\r\n        /*\r\n         * travelButtonShowOptions's class badge-secondary is related to toggleTravelButtonText() in home.hbs\r\n         * if else statement where checks class.indexOf(class)\r\n         */\r\n        const travelButtonShowOptions = {\r\n          class: ['badge', 'badge-secondary', 'text-warning'],\r\n          type: 'button',\r\n          data_toggle: 'collapse',\r\n          data_target: `#collapse${travelId}`,\r\n          aria_expanded: 'true',\r\n          aria_controls: `collapse${travelId}`,\r\n          data_text_swap: 'hide',\r\n          data_text_original: 'show',\r\n          data_text_badge: `${expensesCount}`,\r\n          data_text_badge_sr: 'expenses count in travel',\r\n          onclick: 'toggleTravelButtonText(event)',\r\n          style: 'width: 70px'\r\n        }\r\n        const travelButtonEditOptions = {\r\n          class: ['badge', 'badge-secondary', 'text-white'],\r\n          type: 'button',\r\n          onclick: `location.href='${hrefTravel}'`\r\n        }\r\n        const travelButtonElemOptions = {class: 'mb-0 d-inline mx-1'};\r\n        const travelHeaderTextOptions = {class: 'mb-1'};\r\n        const travelCollapseOptions = {\r\n          id: `collapse${travelId}`,\r\n          class: 'collapse',\r\n          aria_labelledby: `heading${travelId}_CardHeader`,\r\n          // data_parent: `#travel_${travelId}Accordion`\r\n        }\r\n        const travelCardOptions = {\r\n          class: 'card  bg-secondary text-white',\r\n          id: `travel_${travelId}_Card`\r\n        }\r\n        // HTML Travel ELEMENTS\r\n        const travelButtonBadgeSr = createElement('span', {class: 'sr-only'}, 'expenses count');\r\n        const travelButtonBadge = createElement('span', travelButtonBadgeOptions, expensesCount);\r\n        const travelButtonShowText = createElement('button', travelButtonShowOptions, 'show' + travelButtonBadge + travelButtonBadgeSr);\r\n        const travelButtonShowElem = createElement('h6', travelButtonElemOptions, travelButtonShowText);\r\n        const travelButtonEditText = createElement('button', travelButtonEditOptions, 'edit');\r\n        const travelButtonEditElem = createElement('h6', travelButtonElemOptions, travelButtonEditText);\r\n        const travelHeaderText = createElement('h6', travelHeaderTextOptions, travelHeaderTextString);\r\n        const travelHeaderElem = createElement('div', {class: ''}, travelHeaderText + travelButtonShowElem + travelButtonEditElem);\r\n        const travelCardHeader = createElement('div', {class: 'card-header py-2'}, travelHeaderElem);\r\n        const travelCardBody = createElement('div', {class: 'card-body'}, expenses);\r\n        const travelCollapse = createElement('div', travelCollapseOptions, travelCardBody);\r\n        const travelCard = createElement('div', travelCardOptions, travelCardHeader + travelCollapse);\r\n        travelObjectsArray.push(travelCard);\r\n      });\r\n      const travels = travelObjectsArray.join(\"\");\r\n      // HTML Month ELEMENTS OPTIONS\r\n      const monthButtonBadgeOptions = {class: 'badge badge-dark mx-1'};\r\n      /*\r\n       * monthButtonShowOptions's class badge-secondary is related to toggleTravelButtonText() in home.hbs\r\n       * if else statement where checks class.indexOf(class)\r\n       */\r\n      const monthButtonShowOptions = {\r\n        class: ['badge', 'badge-light', 'text-dark'],\r\n        type: 'button',\r\n        data_toggle: 'collapse',\r\n        data_target: `#collapse${yearString}_${monthValue}`,\r\n        aria_expanded: 'true',\r\n        aria_controls: `collapse${yearString}_${monthValue}`,\r\n        data_text_swap: 'hide',\r\n        data_text_original: 'show',\r\n        data_text_badge: `${monthObject.count}`,\r\n        data_text_badge_sr: 'travels count in month',\r\n        onclick: 'toggleTravelButtonText(event)',\r\n        style: 'width: 70px'\r\n      };\r\n      const monthCollapseOptions = {\r\n        id: `collapse${yearString}_${monthValue}`,\r\n        class: 'collapse',\r\n        aria_labelledby: `heading${yearString}_${monthValue}_CardHeader`\r\n      };\r\n      // HTML Month ELEMENTS\r\n      const monthButtonBadgeSr = createElement('span', {class: 'sr-only'}, 'expenses count');\r\n      const monthButtonBadge = createElement('span', monthButtonBadgeOptions, monthObject.count);\r\n      const monthButtonShowText = createElement('button', monthButtonShowOptions, 'show' + monthButtonBadge + monthButtonBadgeSr);\r\n      const monthButtonShowElem = createElement('h6', {class: 'mb-0 mx-1 d-inline float-right'}, monthButtonShowText);\r\n      const monthCardHeader = createElement('div', {class: 'card-header py-2'}, monthString + monthButtonShowElem);\r\n      const monthCardBody = createElement('div', {class: 'card-body'}, travels);\r\n      const monthCollapse = createElement('div', monthCollapseOptions, monthCardBody);\r\n      const monthCard = createElement('div', {class: 'card', style: 'border: none'}, monthCardHeader + monthCollapse);\r\n      monthObjectsArray.push(monthCard);\r\n    });\r\n    const months = monthObjectsArray.join('');\r\n    // HTML Year ELEMENTS OPTIONS\r\n    const yearButtonBadgeOptions = {class: 'badge badge-light mx-1'};\r\n    /*\r\n     * yearlButtonShowOptions's class badge-secondary is related to toggleTravelButtonText() in home.hbs\r\n     * if else statement where checks class.indexOf(class)\r\n     */\r\n    const yearButtonShowOptions = {\r\n      class: ['badge', 'badge-dark', 'text-white'],\r\n      type: 'button',\r\n      data_toggle: 'collapse',\r\n      data_target: `#collapse${yearString}`,\r\n      aria_expanded: 'false',\r\n      aria_controls: `collapse${yearString}`,\r\n      data_text_swap: 'hide',\r\n      data_text_original: 'show',\r\n      data_text_badge: `${yearObject.countTotal}`,\r\n      data_text_badge_sr: 'travels count in month',\r\n      onclick: 'toggleTravelButtonText(event)',\r\n      style: 'width: 70px'\r\n    };\r\n    const monthsCollapseOptions = {\r\n      id: `collapse${yearString}`,\r\n      class: 'collapse',\r\n      aria_labelledby: `heading${yearString}_CardHeader`\r\n    };\r\n    // HTML Year ELEMENTS\r\n    const yearButtonBadgeSr = createElement('span', {class: 'sr-only'}, 'expenses count');\r\n    const yearButtonBadge = createElement('span', yearButtonBadgeOptions, yearObject.countTotal);\r\n    const yearButtonShowText = createElement('button', yearButtonShowOptions, 'show' + yearButtonBadge + yearButtonBadgeSr);\r\n    const yearButtonShowElem = createElement('h6', {class: 'mb-0 mx-1 d-inline float-right'}, yearButtonShowText);\r\n    const yearCardHeader = createElement('div', {class: 'card-header py-2', id: `heading${yearString}_CardHeader`}, yearString + yearButtonShowElem);\r\n    const yearCardBody = createElement('div', {class: 'card-body p-0'}, months);\r\n    const yearCollapse = createElement('div', monthsCollapseOptions, yearCardBody);\r\n    const yearCard = createElement('div', {class: 'card'}, yearCardHeader + yearCollapse );\r\n    yearObjectsArray.push(yearCard);\r\n  });\r\n  const result = createElement('div', {id: 'yearsAccordion'}, yearObjectsArray.join('\\n'));\r\n  return result;\r\n});\r\n\r\n\r\n/*\r\n * Returns HTML elements\r\n * @param {object} value Array with travels mongo aggregate group by year and each year group by month\r\n * more in Travel Schema /models/Travel.js Travel.byYear_byMonth\r\n */\r\nexpressHbs.registerHelper('yearsAccordion', (value, csrf) => {\r\n\r\n  const formatter = new Intl.NumberFormat('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\r\n  // HTML Accordion - RESULT\r\n  const yearObjectsArray = [];\r\n  value.forEach((yearObject) => {\r\n    const yearString = yearObject._id.year.toString();\r\n    // HTML Year Card COLLAPSE - BODY\r\n    const monthObjectsArray = [];\r\n    yearObject.byYear.forEach((monthObject) => {\r\n      const monthValue = monthObject._id.month-1;\r\n      const monthString = moment().month(monthValue).format('MMMM');\r\n      const travelObjectsArray = [];\r\n      // HTML Month Card COLLAPSE - BODY\r\n      monthObject.byMonth.forEach((travelObject) => {\r\n        const dateFromString = moment(travelObject.dateFrom).format('YYYY-MM-DD');\r\n        const travelId = travelObject._id;\r\n        const expensesCount = travelObject.expenses.length;\r\n        const hrefTravel = `/travels/${travelId}`;\r\n        const homeCurrency = travelObject.homeCurrency;\r\n        const totalString = `${formatter.format(travelObject.total)} ${homeCurrency}`;\r\n        const travelHeaderTextString =  `${dateFromString} ${travelObject.description} ${totalString}`;\r\n        // HTML Travel Card COLLAPSE - BODY\r\n        const expenseObjectsArray = [];\r\n        travelObject.expenses.forEach((expenseObject) => {\r\n          const expenseId = expenseObject._id;\r\n          const expenseDate = expenseObject.date;\r\n          const expenseDateString = moment(expenseDate).format('YYYY-MM-DD');\r\n          const amountString = formatter.format(expenseObject.amount);\r\n          const amountConvertedString = formatter.format(expenseObject.amountConverted);\r\n          // Different data if expenseObject.type = Mileage\r\n          let currency_unit, rate, rateText, amountLabelText;\r\n          if (expenseObject.type != 'Mileage') {\r\n            currency_unit = expenseObject.currency;\r\n            let curRate = travelObject.curRates.find((exp) => {\r\n              return exp._id.toString() === expenseObject.curRate.toString();\r\n            });\r\n            if (curRate) {\r\n              rate = formatter.format(curRate.rate[expenseObject.currency]);\r\n            } else {\r\n              rate = formatter.format(0);\r\n            }\r\n            rateText = `1 ${travelObject.homeCurrency} = ${rate} ${currency_unit}`;\r\n            amountLabelText = 'Amount in local currency'\r\n          } else {\r\n            currency_unit = expenseObject.unit;\r\n            rate = formatter.format(Number(travelObject.perMileAmount));\r\n            rateText = `1 ${currency_unit} = ${rate} ${travelObject.homeCurrency}`;\r\n            amountLabelText = 'Distance'\r\n          }\r\n          // HTML Expense Card ELEMENTS OPTIONS\r\n          const labelTextOptions = {class:'card-text'};\r\n          const labelOptions = {class: 'card-text text-warning mb-0'};\r\n          const expenseOptions = {class:'card-text mb-1'};\r\n          // TODO titleOptions, expenseCardBodyOptions & expenseCard id not needed?\r\n          const titleOptions = {class:'card-title', id:`heading${expenseId}_CardTitle`};\r\n          const expenseCardBodyOptions = {class:'card-body', id:`heading${expenseId}_CardBody`};\r\n          const expenseCardOptions = {class:['card', 'text-white', 'bg-secondary', 'mx-2', 'my-2', 'border-warning'], id:`expense_${expenseId}_Card`};\r\n          // Card Body tags and attributes for expenseObject values\r\n          const htmlLabelTagsArr = ['small', 'p'];\r\n          const htmlTagsArr = htmlLabelTagsArr.concat(['p']);\r\n          const htmlOptionsArr = [labelTextOptions, labelOptions, expenseOptions];\r\n          const htmlTagsArrTitle = htmlLabelTagsArr.concat(['h6']);\r\n          const htmlOptionsArrTitle = [labelTextOptions, labelOptions, titleOptions];\r\n\r\n          // HTML Expense Card ELEMENTS\r\n          const expenseDescriptionElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Description', expenseObject.description]);\r\n          const expenseDateElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Date', expenseDateString]);\r\n          const expenseRateElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Rate', rateText]);\r\n          const aText = amountString + ' ' + currency_unit;\r\n          const expenseAmountElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, [amountLabelText, aText]);\r\n          const acText = amountConvertedString + ' ' + travelObject.homeCurrency;\r\n          const expenseAmountConvertedElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Amount', acText]);\r\n          const expenseTypeElem = createTwoCardElements(htmlTagsArr, htmlOptionsArr, ['Type', expenseObject.type]);\r\n          const expenseCardBodyTitle = expenseTypeElem;\r\n          // const expenseCardBodyTitle = createElement('h6', titleOptions, expenseObject.type);\r\n          const expenseBodyElements = expenseCardBodyTitle + expenseDateElem + expenseDescriptionElem + expenseAmountElem + expenseRateElem + expenseAmountConvertedElem;\r\n          // test\r\n          const form = createExpenseForm('post', 'patch', csrf, expenseTypes, travelObject, expenseObject, formatter);\r\n          const expenseCardBody = createElement('div', expenseCardBodyOptions,  form + expenseBodyElements);\r\n          // const expenseCardBody = createElement('div', expenseCardBodyOptions, expenseBodyElements);\r\n          const expenseCard = createElement('div', expenseCardOptions,  expenseCardBody);\r\n          expenseObjectsArray.push(expenseCard);\r\n        });\r\n        const expenses = expenseObjectsArray.join('')\r\n        // HTML Travel Card ELEMENTS OPTIONS\r\n        const travelButtonBadgeOptions = {class: 'badge badge-warning mx-1'};\r\n        /*\r\n         * travelButtonShowOptions's class badge-secondary is related to toggleTravelButtonText() in home.hbs\r\n         * if else statement where checks class.indexOf(class)\r\n         */\r\n        const travelButtonShowOptions = {\r\n          class: ['badge', 'badge-secondary', 'text-warning'],\r\n          type: 'button',\r\n          data_toggle: 'collapse',\r\n          data_target: `#collapse${travelId}`,\r\n          aria_expanded: 'true',\r\n          aria_controls: `collapse${travelId}`,\r\n          data_text_swap: 'hide',\r\n          data_text_original: 'show',\r\n          data_text_badge: `${expensesCount}`,\r\n          data_text_badge_sr: 'expenses count in travel',\r\n          onclick: 'toggleTravelButtonText(event)',\r\n          style: 'width: 70px'\r\n        }\r\n        const travelButtonEditOptions = {\r\n          class: ['badge', 'badge-secondary', 'text-white'],\r\n          type: 'button',\r\n          onclick: `location.href='${hrefTravel}'`\r\n        }\r\n        const travelButtonElemOptions = {class: 'mb-0 d-inline mx-1'};\r\n        const travelHeaderTextOptions = {class: 'mb-1'};\r\n        const travelCollapseOptions = {\r\n          id: `collapse${travelId}`,\r\n          class: 'collapse',\r\n          aria_labelledby: `heading${travelId}_CardHeader`,\r\n          // data_parent: `#travel_${travelId}Accordion`\r\n        }\r\n        const travelCardOptions = {\r\n          class: 'card  bg-secondary text-white',\r\n          id: `travel_${travelId}_Card`\r\n        }\r\n        // HTML Travel ELEMENTS\r\n        const travelButtonBadgeSr = createElement('span', {class: 'sr-only'}, 'expenses count');\r\n        const travelButtonBadge = createElement('span', travelButtonBadgeOptions, expensesCount);\r\n        const travelButtonShowText = createElement('button', travelButtonShowOptions, 'show' + travelButtonBadge + travelButtonBadgeSr);\r\n        const travelButtonShowElem = createElement('h6', travelButtonElemOptions, travelButtonShowText);\r\n        const travelButtonEditText = createElement('button', travelButtonEditOptions, 'edit');\r\n        const travelButtonEditElem = createElement('h6', travelButtonElemOptions, travelButtonEditText);\r\n        const travelHeaderText = createElement('h6', travelHeaderTextOptions, travelHeaderTextString);\r\n        const travelHeaderElem = createElement('div', {class: ''}, travelHeaderText + travelButtonShowElem + travelButtonEditElem);\r\n        const travelCardHeader = createElement('div', {class: 'card-header py-2'}, travelHeaderElem);\r\n        const travelCardBody = createElement('div', {class: 'card-body'}, expenses);\r\n        const travelCollapse = createElement('div', travelCollapseOptions, travelCardBody);\r\n        const travelCard = createElement('div', travelCardOptions, travelCardHeader + travelCollapse);\r\n        travelObjectsArray.push(travelCard);\r\n      });\r\n      const travels = travelObjectsArray.join(\"\");\r\n      // HTML Month ELEMENTS OPTIONS\r\n      const monthButtonBadgeOptions = {class: 'badge badge-dark mx-1'};\r\n      /*\r\n       * monthButtonShowOptions's class badge-secondary is related to toggleTravelButtonText() in home.hbs\r\n       * if else statement where checks class.indexOf(class)\r\n       */\r\n      const monthButtonShowOptions = {\r\n        class: ['badge', 'badge-light', 'text-dark'],\r\n        type: 'button',\r\n        data_toggle: 'collapse',\r\n        data_target: `#collapse${yearString}_${monthValue}`,\r\n        aria_expanded: 'true',\r\n        aria_controls: `collapse${yearString}_${monthValue}`,\r\n        data_text_swap: 'hide',\r\n        data_text_original: 'show',\r\n        data_text_badge: `${monthObject.count}`,\r\n        data_text_badge_sr: 'travels count in month',\r\n        onclick: 'toggleTravelButtonText(event)',\r\n        style: 'width: 70px'\r\n      };\r\n      const monthCollapseOptions = {\r\n        id: `collapse${yearString}_${monthValue}`,\r\n        class: 'collapse',\r\n        aria_labelledby: `heading${yearString}_${monthValue}_CardHeader`\r\n      };\r\n      // HTML Month ELEMENTS\r\n      const monthButtonBadgeSr = createElement('span', {class: 'sr-only'}, 'expenses count');\r\n      const monthButtonBadge = createElement('span', monthButtonBadgeOptions, monthObject.count);\r\n      const monthButtonShowText = createElement('button', monthButtonShowOptions, 'show' + monthButtonBadge + monthButtonBadgeSr);\r\n      const monthButtonShowElem = createElement('h6', {class: 'mb-0 mx-1 d-inline float-right'}, monthButtonShowText);\r\n      const monthCardHeader = createElement('div', {class: 'card-header py-2'}, monthString + monthButtonShowElem);\r\n      const monthCardBody = createElement('div', {class: 'card-body'}, travels);\r\n      const monthCollapse = createElement('div', monthCollapseOptions, monthCardBody);\r\n      const monthCard = createElement('div', {class: 'card', style: 'border: none'}, monthCardHeader + monthCollapse);\r\n      monthObjectsArray.push(monthCard);\r\n    });\r\n    const months = monthObjectsArray.join('');\r\n    // HTML Year ELEMENTS OPTIONS\r\n    const yearButtonBadgeOptions = {class: 'badge badge-light mx-1'};\r\n    /*\r\n     * yearlButtonShowOptions's class badge-secondary is related to toggleTravelButtonText() in home.hbs\r\n     * if else statement where checks class.indexOf(class)\r\n     */\r\n    const yearButtonShowOptions = {\r\n      class: ['badge', 'badge-dark', 'text-white'],\r\n      type: 'button',\r\n      data_toggle: 'collapse',\r\n      data_target: `#collapse${yearString}`,\r\n      aria_expanded: 'false',\r\n      aria_controls: `collapse${yearString}`,\r\n      data_text_swap: 'hide',\r\n      data_text_original: 'show',\r\n      data_text_badge: `${yearObject.countTotal}`,\r\n      data_text_badge_sr: 'travels count in month',\r\n      onclick: 'toggleTravelButtonText(event)',\r\n      style: 'width: 70px'\r\n    };\r\n    const monthsCollapseOptions = {\r\n      id: `collapse${yearString}`,\r\n      class: 'collapse',\r\n      aria_labelledby: `heading${yearString}_CardHeader`\r\n    };\r\n    // HTML Year ELEMENTS\r\n    const yearButtonBadgeSr = createElement('span', {class: 'sr-only'}, 'expenses count');\r\n    const yearButtonBadge = createElement('span', yearButtonBadgeOptions, yearObject.countTotal);\r\n    const yearButtonShowText = createElement('button', yearButtonShowOptions, 'show' + yearButtonBadge + yearButtonBadgeSr);\r\n    const yearButtonShowElem = createElement('h6', {class: 'mb-0 mx-1 d-inline float-right'}, yearButtonShowText);\r\n    const yearCardHeader = createElement('div', {class: 'card-header py-2', id: `heading${yearString}_CardHeader`}, yearString + yearButtonShowElem);\r\n    const yearCardBody = createElement('div', {class: 'card-body p-0'}, months);\r\n    const yearCollapse = createElement('div', monthsCollapseOptions, yearCardBody);\r\n    const yearCard = createElement('div', {class: 'card'}, yearCardHeader + yearCollapse );\r\n    yearObjectsArray.push(yearCard);\r\n  });\r\n  const result = createElement('div', {id: 'yearsAccordion'}, yearObjectsArray.join('\\n'));\r\n  return result;\r\n});\r\n","/* eslint-disable max-classes-per-file */\r\nclass importFileError extends Error {\r\n  constructor(...args) {\r\n    super(...args);\r\n    Error.captureStackTrace(this, importFileError);\r\n    this.name = 'importFileError';\r\n  }\r\n}\r\n\r\nclass saveToDbError extends Error {\r\n  constructor(...args) {\r\n    super(...args);\r\n    Error.captureStackTrace(this, saveToDbError);\r\n    this.name = 'saveToDbError';\r\n  }\r\n}\r\n\r\nexports.importFileError = importFileError;\r\nexports.saveToDbError = saveToDbError;\r\n","const mongoose = require('mongoose');\r\nconst _ = require('lodash');\r\n// const moment = require('moment');\r\nconst fs = require('fs');\r\nconst Papa = require('papaparse');\r\n\r\nconst User = require('../models/User');\r\nconst Travel = require('../models/Travel');\r\nconst Expense = require('../models/Expense');\r\n// const Rate = require('../models/Rate');\r\nconst Currency = require('../models/Currency');\r\n\r\nconst { ObjectId } = mongoose.Types;\r\n\r\nconst { expenseTypes } = require('../lib/globals');\r\nconst constants = require('../lib/constants');\r\nconst myErrors = require('../utils/myErrors');\r\n\r\n// read and parse file\r\nasync function readAndParseFile(filePath, enc = 'utf8') {\r\n  try {\r\n    const myFile = fs.readFileSync(filePath, enc);\r\n    const parsedData = Papa.parse(myFile, {\r\n      quoteChar: '\"',\r\n      escapeChar: '\"',\r\n      header: true,\r\n      dynamicTyping: false,\r\n      preview: 0,\r\n      encoding: 'utf8',\r\n      complete: (results) => {},\r\n      skipEmptyLines: true\r\n    });\r\n    return parsedData;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n\r\n// delete uploaded file\r\nfunction deleteFile(filePath, message = '') {\r\n  try {\r\n    if (fs.existsSync(filePath)) {\r\n      fs.unlink(filePath, (err) => {\r\n        if (err) {\r\n          throw err;\r\n        }\r\n        console.log(message);\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.log(`File: ${filePath} not deleted!`);\r\n    throw err;\r\n  }\r\n}\r\n\r\n// return Error with message on condtion is true\r\nasync function checkFileFor(condition, message) {\r\n  const suffix = 'File should be a CSV with header in first line and not empty!';\r\n  try {\r\n    if (condition) {\r\n      return new myErrors.importFileError(`${message} - ${suffix}`);\r\n    }\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n}\r\n\r\n// check if file is not empty, CSV or it was not selected\r\nconst checkFile = (myFile) => new Promise(async (resolve, reject) => {\r\n  const tripleCheck = async (myFIle) => {\r\n    try {\r\n      error = await checkFileFor(myFile.name === '', 'No file selected!');\r\n      if (error) { return error; }\r\n      error = await checkFileFor(myFile.size === 0, 'Empty file!');\r\n      if (error) { return error; }\r\n      error = await checkFileFor(myFile.path.split('.').pop() != 'csv', 'Not a CSV file!');\r\n      if (error) { return error; }\r\n      return;\r\n    } catch (err) {\r\n      resolve(err);\r\n    }\r\n  };\r\n  try {\r\n    const result = await tripleCheck();\r\n    resolve(result);\r\n  } catch (err) {\r\n    resolve(err);\r\n  }\r\n});\r\n\r\n// create currency Object\r\nfunction createCurrency(value) {\r\n  const currency = {};\r\n  const curRate = {};\r\n  currency.base = value.base;\r\n  currency.date = new Date(value.date);\r\n  curRate[value.currency] = Number(value.rate);\r\n  currency.rate = curRate;\r\n  return currency;\r\n}\r\n\r\n// return currency if currency does't exist in DB\r\nconst getOnlyNewCurrency = (currency, value) => new Promise((resolve, reject) => {\r\n  if (!currency) {\r\n    return resolve(value);\r\n  }\r\n  return resolve();\r\n});\r\n\r\n/* Prepare new currencies which will save later.\r\n * Check if currencies are only in DB and return array with new currencies\r\n */\r\nasync function expensesImportNewCurrenciesForSave(array) {\r\n  const notExistingCurrenciesDB = [];\r\n  const existingCurrenciesDB = [];\r\n  return await new Promise(async (resolve, reject) => {\r\n    for (value of array) {\r\n      const currency = await Currency.findOne({\r\n        base: value.base,\r\n        date: value.date,\r\n        rate: value.rate\r\n      }, (err, doc) => {\r\n        if (err) {\r\n          console.log('Error: ', err.message);\r\n          throw err;\r\n        }\r\n      });\r\n      await getOnlyNewCurrency(currency, value).then((value) => {\r\n        if (value) {\r\n          notExistingCurrenciesDB.push(value);\r\n        } else {\r\n          existingCurrenciesDB.push(currency);\r\n        }\r\n      }).catch((err) => {\r\n        reject(err);\r\n      });\r\n    }\r\n    return await resolve({ notExistingCurrenciesDB, existingCurrenciesDB });\r\n  });\r\n}\r\n\r\n/* read file, check file and return data or error\r\n * if file is not validate return custom error importFileError otherwise\r\n * return array with expenses data\r\n */\r\nasync function readCheckFileAndGetData(myFile, option) {\r\n  let error = null;\r\n  const myFilePath = myFile.path;\r\n  let headerToBe;\r\n  switch (option) {\r\n    case 'travels':\r\n      headerToBe = constants.IMPORT_TRAVEL_HEADER;\r\n      break;\r\n    case 'expenses':\r\n      headerToBe = constants.IMPORT_EXPENSE_HEADER;\r\n    default:\r\n  }\r\n\r\n  try {\r\n    // check if file is CSV, not empty or not even selected\r\n    error = await checkFile(myFile).catch((err) => {\r\n      throw err;\r\n    });\r\n    if (error) { throw error; }\r\n\r\n    // no error - file is CSV & has some data\r\n    const parsedData = await readAndParseFile(myFilePath);\r\n    const dataArray = parsedData.data;\r\n    const expensesCountBefore = dataArray.length;\r\n\r\n    // check if data has mathcing header\r\n    const parsedHeaderArray = parsedData.meta.fields;\r\n    error = await checkFileFor(!_.isEqual(headerToBe, parsedHeaderArray), `Header should be: ${headerToBe}`).catch((err) => {\r\n      throw err;\r\n    });\r\n    if (error) { throw error; }\r\n    return dataArray;\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n}\r\n\r\n/* Get and prepare currencies from imported file\r\n * remove rate & base from passed array @param dataArray\r\n * add property _user to passed array @param dataArray\r\n * add property curRate to passed array @param dataArray\r\n */\r\nasync function expensesImportSetCurrencyArray(dataArray, userId, travels) {\r\n  let message = '';\r\n  const error = null;\r\n\r\n  try {\r\n    const expensesCountBefore = dataArray.length;\r\n\r\n    // findRates and travel in expenses CSV\r\n    const noTravelKeys = [];\r\n    await _.forEach(dataArray, async (value, key, object) => {\r\n      value._user = userId;\r\n      value.amount = Number(value.amount).toFixed(2);\r\n      value.rate = Number(value.rate).toFixed(2);\r\n      value.amountConverted = Number(value.amountConverted).toFixed(2);\r\n      let currency = {};\r\n      if (value.type != 'Mileage') {\r\n        currency = createCurrency(value);\r\n        value.curRate = currency;\r\n        delete value.rate;\r\n        delete value.base;\r\n      } else {\r\n        delete value.currency;\r\n      }\r\n\r\n\r\n      // find travel for expense\r\n      const travel = await travels.find((item) => {\r\n        const date = new Date(value.date);\r\n        const dateRange = item.dateFrom <= date && item.dateTo >= date;\r\n        const sameName = item.description == value.travelName;\r\n\r\n        const result = dateRange && sameName;\r\n        if (!result) {\r\n          return false;\r\n        }\r\n        return true;\r\n      });\r\n\r\n      // if no travel for expense delete expense\r\n      if (!travel) {\r\n        noTravelKeys.push(key);\r\n      } else {\r\n        object[key].travel = travel._id;\r\n      }\r\n    });\r\n\r\n    // delete expenses that not belong to any existing travel\r\n    for (value of noTravelKeys.sort((a, b) => b-a)) {\r\n      dataArray.splice(value, 1);\r\n    }\r\n\r\n    // get imported currencies\r\n    let currenciesArray = await dataArray.reduce((result, item) => {\r\n      if (item.curRate && item.type != 'Mileage') {\r\n        result.push(item.curRate);\r\n      }\r\n      return result;\r\n    }, []);\r\n\r\n    // get unique currencies\r\n    currenciesArray = [...new Map(currenciesArray.map((o) => [JSON.stringify(o), o])).values()].sort((a, b) => \r\n      // Turn your strings into dates, and then subtract them\r\n      // to get a value that is either negative, positive, or zero.\r\n      a.date - b.date\r\n    );\r\n\r\n    const expensesCountAfter = dataArray.length;\r\n    const invalidExpensesCount = expensesCountBefore - expensesCountAfter;\r\n    const validExpensesCount = expensesCountBefore - invalidExpensesCount;\r\n    message = `INVALID EXPENSES: ${invalidExpensesCount}. VALID EXPENSES: ${validExpensesCount}`;\r\n\r\n    return ({ currenciesArray, message });\r\n  } catch (err) {\r\n    message = 'Something went wrong during expenses import! Check console log!';\r\n    return ({ err, message });\r\n  }\r\n}\r\n\r\nconst updateTravels = async function (uniqueTravelObjectIds, expenses) {\r\n  return new Promise((async (resolve, reject) => {\r\n    try {\r\n      const updatedTravels = await _.forEach(uniqueTravelObjectIds, async (value, key, object) => {\r\n        const travelExpensesObjectIds = expenses.filter((item) => item.travel === value);\r\n\r\n\r\n        const aggr = await Expense.aggregate([\r\n          { $match: { travel: new ObjectId(value) } },\r\n          { $group: { _id: '$travel', total: { $sum: '$amountConverted' } } }\r\n        ]);\r\n\r\n        const travel = await Travel.findByIdAndUpdate(value, {\r\n          $addToSet: {\r\n            expenses: {\r\n              $each: travelExpensesObjectIds\r\n            }\r\n          },\r\n          $set: { total: aggr[0].total }\r\n        }, { new: true });\r\n      });\r\n      resolve(updatedTravels);\r\n    } catch (err) {\r\n      resolve(err);\r\n    }\r\n  }));\r\n};\r\n\r\nconst expenseImport = async function (dataArray) {\r\n  return new Promise((async (resolve, reject) => {\r\n    try {\r\n      const expenses = await Expense.insertMany(dataArray).catch((err) => {\r\n        throw new myErrors.saveToDbError('Something went wrong during saving expenses to DB!');\r\n      });\r\n      if (!expenses) {\r\n        throw new myErrors.saveToDbError('No expenses saved!');\r\n      }\r\n      const travelObjectIds = expenses.map((expense) => expense.travel);\r\n      const uniqueTravelObjectIds = [...new Set(travelObjectIds)];\r\n      const updatedTravels = await updateTravels(uniqueTravelObjectIds, expenses).catch((err) => {\r\n        throw new myErrors.saveToDbError('Something went wrong during updating travels with expenses!');\r\n      });\r\n\r\n      const message = `${expenses.length} imported. ${updatedTravels.length} travels updated!`;\r\n      resolve(message);\r\n    } catch (err) {\r\n      resolve({ error: err, msg: 'Something went wrong during expense import!' });\r\n    }\r\n  }));\r\n};\r\n\r\nasync function travelImport(dataArray, userId) {\r\n  let message = '';\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      // add user._id to travel\r\n      await _.forEach(dataArray, (value, key) => {\r\n        value._user = userId;\r\n        value.total = Number(0).toFixed(2);\r\n      });\r\n\r\n      // insert travels and update user with travel._id\r\n      const travels = await Travel.insertMany(dataArray).catch((err) => {\r\n        throw new myErrors.saveToDbError('Something went wrong during saving to DB!');\r\n      });\r\n\r\n      if (!travels) {\r\n        throw new myErrors.saveToDbError('No travels saved!');\r\n      }\r\n\r\n      const travelObjectIds = travels.map((travel) => travel._id);\r\n      await User.findByIdAndUpdate(userId, {\r\n        $addToSet: {\r\n          travels: {\r\n            $each: travelObjectIds\r\n          }\r\n        }\r\n      }).catch((err) => {\r\n        throw new myErrors.saveToDbError('Something went wrong during updating user with travels!');\r\n      });\r\n\r\n      message = `${travelObjectIds.length} travels added successfully!`;\r\n      resolve(message);\r\n    } catch (err) {\r\n      resolve({ error: err, msg: 'Something went wrong during travel import!' });\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = {\r\n  readCheckFileAndGetData,\r\n  deleteFile,\r\n  expensesImportSetCurrencyArray,\r\n  expensesImportNewCurrenciesForSave,\r\n  travelImport,\r\n  expenseImport\r\n};\r\n","// test change gitflow again\r\nconst PdfPrinter = require('pdfmake');\r\nconst moment = require('moment');\r\nconst mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Types.ObjectId;\r\n\r\nconst fs = require('fs');\r\n\r\nconst fonts = {\r\n  Helvetica: {\r\n    normal: 'Helvetica',\r\n    bold: 'Helvetica-Bold',\r\n    italics: 'Helvetica-Oblique',\r\n    bolditalics: 'Helvetica-BoldOblique'\r\n  },\r\n  Roboto: {\r\n    normal: 'Helvetica',\r\n    bold: 'Helvetica-Bold',\r\n    italics: 'Helvetica-Oblique',\r\n    bolditalics: 'Helvetica-BoldOblique'\r\n  }\r\n};\r\n\r\nconst printer = new PdfPrinter(fonts);\r\n\r\nfunction toCurrencyFormat (amount) {\r\n  const formatter = new Intl.NumberFormat('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\r\n  const result = formatter.format(amount);\r\n  return result;\r\n}\r\n\r\nfunction buildTableBody(data, columns, tableHeader, total = 0) {\r\n\r\n    let body = [];\r\n    if (!tableHeader) {\r\n      tableHeader = columns;\r\n    }\r\n\r\n    body.push(tableHeader);\r\n\r\n    data.forEach(function(row) {\r\n        var dataRow = [];\r\n\r\n        columns.forEach(function(column) {\r\n            const dataRowObject = {};\r\n            dataRowObject.text = row[column].toString();\r\n            if (['amount', 'rate', tableHeader[tableHeader.length - 1]].includes(column)) {\r\n              dataRowObject.alignment = 'right';\r\n            } else if (column === 'description') {\r\n              dataRowObject.alignment = 'left';\r\n            } else {\r\n              dataRowObject.alignment = 'center';\r\n            }\r\n            // dataRow.push(row[column].toString());\r\n            dataRow.push(dataRowObject);\r\n        })\r\n\r\n        body.push(dataRow);\r\n    });\r\n    const totalRowStyle = {\r\n      alignment: 'right',\r\n      bold: true,\r\n      fontSize: 12\r\n    }\r\n    const totalRow = [{\r\n      colSpan: 6,\r\n      text: `TOTAL`,\r\n      style: totalRowStyle\r\n    }, {}, {}, {}, {}, {}, {\r\n      text: toCurrencyFormat(total),\r\n      style: totalRowStyle\r\n    }];\r\n    body.push(totalRow);\r\n\r\n    return body;\r\n}\r\n\r\nfunction table(data, columns, tableHeader, style = {}, travelTotal = 0) {\r\n    return {\r\n\r\n        style: style,\r\n        layout: 'lightHorizontalLines',\r\n        alignment: 'center',\r\n        table: {\r\n            widths: ['auto', 'auto', '*', 'auto', 'auto', 'auto', 'auto' ],\r\n            heights: function(row) {\r\n              switch (row) {\r\n                case 0:\r\n                  return 10;\r\n                  break;\r\n                case data.length + 1:\r\n                  return 5\r\n                default:\r\n                  return 20\r\n              }\r\n            },\r\n            headerRows: 1,\r\n            body: buildTableBody(data, columns, tableHeader, travelTotal)\r\n        }\r\n    };\r\n}\r\n\r\nfunction createTravelExpensesTableData (travel) {\r\n  const expenses = travel.expenses;\r\n  const dataObjects = [];\r\n  expenses.forEach((expense, key, object) => {\r\n    const newObject = {};\r\n    newObject.date = moment(expense.date).format('l');\r\n    newObject.type = expense.type;\r\n    newObject.description = expense.description,\r\n    newObject.amount = toCurrencyFormat(expense.amount);\r\n    if (expense.type != 'Mileage') {\r\n      newObject.currency = Object.keys(expense.curRate.rate)[0];\r\n      newObject.rate = Object.values(expense.curRate.rate)[0];\r\n    } else {\r\n      newObject.currency = expense.unit;\r\n      newObject.rate = travel.perMileAmount;\r\n    }\r\n    newObject[travel.homeCurrency] = expense.amountConverted;\r\n    dataObjects.push(newObject);\r\n  });\r\n  return dataObjects;\r\n}\r\n\r\nmodule.exports = (travel, user, idx) => {\r\n\r\n  if (!user.profile.name) {\r\n    user.profile.name = 'Unknown';\r\n  }\r\n\r\n  // console.log(typeof ObjectId(travel._id).getTimestamp());\r\n  // console.log(typeof ObjectId(travel._id).toString());\r\n  // console.log(typeof ObjectId(travel._id).valueOf());\r\n\r\n  const invoiceNumber = ObjectId(travel._id).toString() + \"-\" + idx;\r\n  const dateFrom = moment(travel.dateFrom).format('ddd, MMM Do YYYY');\r\n  const dateTo = moment(travel.dateTo).format('ddd, MMM Do YYYY');\r\n\r\n  const tableData = createTravelExpensesTableData(travel);\r\n  const dataProperties = ['date', 'type', 'description', 'amount', 'currency', 'rate', travel.homeCurrency];\r\n  const tableHeader = ['DATE', 'TYPE', 'DESCRIPTION', 'AMOUNT', 'CURRENCY', 'RATE', travel.homeCurrency];\r\n  const tableStyle = {alignment: 'center', fontSize: 10, margin: [20, 0, 20, 0], width: '*'};\r\n\r\n  const titlePdf = `${travel.description}`;\r\n  const authorPdf = `${user.profile.name}`;\r\n  const subjectPdf = 'Travel expenses';\r\n  const keywordsPdf = 'travel report expense';\r\n\r\n  const expensesTable = table(tableData, dataProperties, tableHeader, tableStyle, travel.total);\r\n  let total = toCurrencyFormat(travel.total);\r\n  const docDefinition = {\r\n    // ...\r\n    // pageSize: 'A4',\r\n    footer: function(currentPage, pageCount, pageSize) {\r\n      return [\r\n        {canvas: [\r\n          {type: 'line',\tx1: 30, y1: 15,\tx2: 559.28, y2: 15,\tlineWidth: 1, lineCap: 'square'}\r\n        ]},\r\n\r\n        {text: currentPage.toString() + ' of ' + pageCount, alignment: 'center', fontSize: 10, margin: [0, 10]}\r\n\r\n      ];\r\n    },\r\n    header: function(currentPage, pageCount, pageSize) {\r\n      // you can apply any logic and return any valid pdfmake element\r\n      return [\r\n        {columns: [\r\n          {text: 'Created with TExpApp', alignment: (currentPage % 2) ? 'left' : 'right', fontSize: 10},\r\n          {text: moment().format('YYYY-MM-DD'), alignment: (currentPage % 2) ? 'right' : 'left', fontSize: 10}\r\n        ]},\r\n        {canvas: [{type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 100, fillColor: 'red'}]}\r\n      ]\r\n    },\r\n    info: {\r\n      producer: 'TExpApp',\r\n      title: titlePdf,\r\n      author: authorPdf,\r\n      subject: subjectPdf,\r\n      keywords: keywordsPdf,\r\n  },\r\n    content: [\r\n      {stack: [\r\n          {text: 'EXPENSES REPORT'}\r\n        ],\r\n        style: 'title'\r\n      },\r\n      {stack: [\r\n        {\r\n          style: 'personInfo',\r\n          layout: 'noBorders',\r\n          table: {\r\n            style: 'personInfo',\r\n            widths: ['auto', 'auto'],\r\n            body: [\r\n              ['Team:', user.team],\r\n              ['Name:', user.fullName()],\r\n              ['Position:', user.jobPosition]\r\n            ]\r\n        }}\r\n      ]},\r\n      {stack: [\r\n        {text: `invoice: ${invoiceNumber}`},\r\n        {text: travel.description, style: 'description'},\r\n        {\r\n          layout: 'noBorders',\r\n          table: {\r\n            style: 'travelDate',\r\n            widths: ['*', 'auto'],\r\n            body: [\r\n              ['From:', dateFrom],\r\n              ['To:', dateTo]\r\n            ]\r\n\r\n        }}\r\n      ],\r\n      style: 'travelInfo'\r\n    },\r\n      {text: `Total: ${travel.homeCurrency} ${total}`, margin: [0, 0, 0, 20], color: '#696969'},\r\n      expensesTable\r\n    ],\r\n    styles: {\r\n    title: {\r\n      fontSize: 14,\r\n      bold: true,\r\n      margin: [0, 20, 0, 10]\r\n    },\r\n    personInfo: {\r\n      fontSize: 12,\r\n        margin: [0, 0, 0, 30],\r\n      alignment: 'left',\r\n      color: '#696969'\r\n    },\r\n    travelInfo: {\r\n      margin: [0, 20, 0, 30],\r\n      alignment: 'right'\r\n    },\r\n    description: {\r\n      fontSize:18,\r\n      bold: true\r\n    },\r\n    travelDate: {\r\n      fontSize:12,\r\n      bold: false\r\n    }\r\n  }\r\n  };\r\n\r\n  const pdfDoc = printer.createPdfKitDocument(docDefinition);\r\n\r\n  const pdfDocPath = `./pdf/TReport_${user._id}_${travel._id}-${idx}.pdf`;\r\n  pdfDoc.pipe(fs.createWriteStream(pdfDocPath));\r\n  pdfDoc.end();\r\n  return pdfDoc;\r\n}\r\n","// test change gitflow again\r\nconst PdfPrinter = require('pdfmake');\r\nconst moment = require('moment');\r\n\r\nconst fs = require('fs');\r\n\r\nconst mongoose = require('mongoose');\r\n\r\nconst User = require('../models/User');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst fonts = {\r\n  Helvetica: {\r\n    normal: 'Helvetica',\r\n    bold: 'Helvetica-Bold',\r\n    italics: 'Helvetica-Oblique',\r\n    bolditalics: 'Helvetica-BoldOblique'\r\n  },\r\n  Roboto: {\r\n    normal: 'Helvetica',\r\n    bold: 'Helvetica-Bold',\r\n    italics: 'Helvetica-Oblique',\r\n    bolditalics: 'Helvetica-BoldOblique'\r\n  }\r\n};\r\n\r\nconst printer = new PdfPrinter(fonts);\r\n\r\nfunction toCurrencyFormat (amount) {\r\n  const formatter = new Intl.NumberFormat('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});\r\n  const result = formatter.format(amount);\r\n  return result;\r\n}\r\n\r\nfunction buildTableBody(data, columns, tableHeader, total = 0) {\r\n    const totalInCurrencyFormat = toCurrencyFormat(total)\r\n    let body = [];\r\n    if (!tableHeader) {\r\n      tableHeader = columns;\r\n    }\r\n\r\n    body.push(tableHeader);\r\n\r\n    data.forEach(function(row) {\r\n        let dataRow = [];\r\n        columns.forEach(function(column) {\r\n            const dataRowObject = {};\r\n            dataRowObject.text = row[column].toString();\r\n            if (['amount', 'perMile', tableHeader[tableHeader.length - 1]].includes(column)) {\r\n              dataRowObject.alignment = 'right';\r\n            } else if (column === 'description') {\r\n              dataRowObject.alignment = 'left';\r\n            } else {\r\n              dataRowObject.alignment = 'center';\r\n            }\r\n            dataRow.push(dataRowObject);\r\n        });\r\n        const invoiceNumberStyle = {\r\n          alignment: 'left',\r\n          bold: true,\r\n          fontSize: 8\r\n        }\r\n        let idRow = [{\r\n          colSpan: 1,\r\n          text: `invoice:`,\r\n          style: invoiceNumberStyle\r\n        }, {\r\n          colSpan: 1,\r\n          text: row._id,\r\n          style: invoiceNumberStyle\r\n        }, {}, {}, {}, {}];\r\n        body.push(idRow);\r\n        body.push(dataRow);\r\n    });\r\n    const totalRowStyle = {\r\n      alignment: 'right',\r\n      bold: true,\r\n      fontSize: 12\r\n    }\r\n    const totalRow = [{\r\n      colSpan: 5,\r\n      text: `TOTAL`,\r\n      style: totalRowStyle\r\n    }, {}, {}, {}, {}, {\r\n      text: totalInCurrencyFormat,\r\n      style: totalRowStyle\r\n    }];\r\n    body.push(totalRow);\r\n\r\n    return body;\r\n}\r\n\r\nfunction table(data, columns, tableHeader, style = {}, sum = 0) {\r\n    return {\r\n        style: style,\r\n        layout: 'lightHorizontalLines',\r\n        alignment: 'center',\r\n        table: {\r\n            widths: ['auto', 'auto', 'auto', 'auto', '*', 'auto'],\r\n            heights: function(row) {\r\n              switch (row) {\r\n                case 0:\r\n                  return 10;\r\n                  break;\r\n                case data.length * 2 + 1:\r\n                  return 5;\r\n                  break;\r\n              }\r\n              let h = row % 2 === 0 ? 20 : 10;\r\n              return h;\r\n            },\r\n            headerRows: 1,\r\n            body: buildTableBody(data, columns, tableHeader, sum)\r\n        }\r\n    };\r\n}\r\n\r\nfunction createTravelsTotalTableData(travels, indexes) {\r\n  const dataObjects = [];\r\n  travels.forEach((travel, key, object) => {\r\n    const newObject = {};\r\n    newObject._id = travel._id.toString() + \"-\" + indexes[key];\r\n    newObject.dateFrom = moment(travel.dateFrom).format('l');\r\n    newObject.dateTo = moment(travel.dateTo).format('l');\r\n    newObject.description = travel.description;\r\n    newObject.currency = travel.homeCurrency;\r\n    newObject.perMile = travel.perMileAmount;\r\n    newObject.amount = toCurrencyFormat(travel.total);\r\n    dataObjects.push(newObject);\r\n  });\r\n  return dataObjects;\r\n}\r\n\r\nmodule.exports = (travels, user, dateRange, sum, indexes) => {\r\n  console.log(indexes);\r\n  const titlePdf = `TOTAL`;\r\n  const authorPdf = `${user.profile.name}`;\r\n  const subjectPdf = 'Travel expenses';\r\n  const keywordsPdf = 'travel report expense';\r\n  const df = dateRange.df;\r\n  const dt = dateRange.dt;\r\n  const dateFrom = moment(df).format('ddd, MMM Do YYYY');\r\n  const dateTo = moment(dt).format('ddd, MMM Do YYYY');\r\n\r\n  const tableData = createTravelsTotalTableData(travels, indexes);\r\n\r\n  const dataProperties = ['dateFrom', 'dateTo', 'description', 'currency', 'perMile', 'amount'];\r\n  let homeDistance;\r\n  if (user.homeDistance === 'mi') {\r\n    homeDistance = 'MILE';\r\n  } else if (user.homeDistance === 'km') {\r\n    homeDistance = 'KM';\r\n  } else {\r\n    homeDistance = 'X';\r\n  }\r\n  const tableHeader = ['FROM', 'TO', 'DESCRIPTION', 'CUR', `PER ${homeDistance}`, 'AMOUNT'];\r\n  const tableStyle = {alignment: 'center', fontSize: 10, margin: [20, 0, 20, 0], width: '*'};\r\n\r\n  const travelsTable = table(tableData, dataProperties, tableHeader, tableStyle, sum);\r\n  sum = toCurrencyFormat(sum);\r\n\r\n  const docDefinition = {\r\n    // ...\r\n    // pageSize: 'A4',\r\n    footer: function(currentPage, pageCount, pageSize) {\r\n      return [\r\n\r\n        {canvas: [\r\n          {type: 'line',\tx1: 30, y1: 15,\tx2: 559.28, y2: 15,\tlineWidth: 1, lineCap: 'square'}\r\n        ]},\r\n\r\n        {text: currentPage.toString() + ' of ' + pageCount, alignment: 'center', fontSize: 10, margin: [0, 10]}\r\n      ];\r\n    },\r\n    header: function(currentPage, pageCount, pageSize) {\r\n      // you can apply any logic and return any valid pdfmake element\r\n      return [\r\n        {columns: [\r\n          {text: 'Created with TExpApp', alignment: (currentPage % 2) ? 'left' : 'right', fontSize: 10},\r\n          {text: moment().format('YYYY-MM-DD'), alignment: (currentPage % 2) ? 'right' : 'left', fontSize: 10}\r\n        ]},\r\n        {canvas: [{type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 100, fillColor: 'red'}]}\r\n      ]\r\n    },\r\n    info: {\r\n      producer: 'myApp',\r\n      title: titlePdf,\r\n      author: authorPdf,\r\n      subject: subjectPdf,\r\n      keywords: keywordsPdf,\r\n  },\r\n    content: [\r\n      {stack: [\r\n          {text: 'TOTAL REPORT'}\r\n        ],\r\n        style: 'title'\r\n      },\r\n      {stack: [\r\n        {\r\n          style: 'personInfo',\r\n          layout: 'noBorders',\r\n          table: {\r\n            style: 'personInfo',\r\n            widths: ['auto', 'auto'],\r\n            body: [\r\n              ['Team:', user.team],\r\n              ['Name:', user.fullName()],\r\n              ['Position:', user.jobPosition]\r\n            ]\r\n        }}\r\n      ]},\r\n      {stack: [\r\n        {text: 'TOTAL', style: 'description'},\r\n        {\r\n          layout: 'noBorders',\r\n          table: {\r\n            style: 'travelDate',\r\n            widths: ['*', 'auto'],\r\n            body: [\r\n              ['From:', dateFrom],\r\n              ['To:', dateTo]\r\n            ]\r\n\r\n        }}\r\n      ],\r\n      style: 'travelInfo'\r\n    },\r\n    {text: `Total: ${user.homeCurrency} ${sum}`, margin: [0, 0, 0, 20], color: '#696969'},\r\n    travelsTable\r\n    ],\r\n    styles: {\r\n    title: {\r\n      fontSize: 14,\r\n      bold: true,\r\n      margin: [0, 20, 0, 10]\r\n    },\r\n    personInfo: {\r\n      fontSize: 12,\r\n        margin: [0, 0, 0, 30],\r\n      alignment: 'left',\r\n      color: '#696969'\r\n    },\r\n    travelInfo: {\r\n      margin: [0, 20, 0, 30],\r\n      alignment: 'right'\r\n    },\r\n    description: {\r\n      fontSize:18,\r\n      bold: true\r\n    },\r\n    travelDate: {\r\n      fontSize:12,\r\n      bold: false\r\n    }\r\n  }\r\n  };\r\n\r\n  const pdfDoc = printer.createPdfKitDocument(docDefinition);\r\n\r\n  const pdfDocPath = `./pdf/TOTAL_${user._id}_${df}_${dt}.pdf`;\r\n  pdfDoc.pipe(fs.createWriteStream(pdfDocPath));\r\n  pdfDoc.end();\r\n  return pdfDoc;\r\n}\r\n","const moment = require('moment');\r\n\r\nconst Travel = require('../models/Travel');\r\nconst Expense = require('../models/Expense');\r\nconst Rate = require('../models/Rate');\r\nconst Currency = require('../models/Currency');\r\n\r\nconst findRatesByExactOrClosestDate = require('./utils').findRatesByExactOrClosestDate;\r\nconst convertRateToHomeCurrencyRate = require('./utils').convertRateToHomeCurrencyRate;\r\n\r\nfunction checkExpenseDate(expDate, travelDateFrom, travelDateTo) {\r\n  if (expDate < travelDateFrom || expDate > travelDateTo) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction setNewExpenseDate(expDate, travelDateFrom, travelDateTo) {\r\n  if (expDate < travelDateFrom) {\r\n    return travelDateFrom;\r\n  } else if (expDate > travelDateTo) {\r\n    return travelDateTo;\r\n  }\r\n}\r\n\r\nasync function createNewCurrency(expenseDate, homeCurrency, invoiceCurrency) {\r\n  try {\r\n    let cur = {};\r\n    const dateRates = await findRatesByExactOrClosestDate(expenseDate);\r\n    const convertedRate = await convertRateToHomeCurrencyRate(dateRates.rates, homeCurrency, invoiceCurrency);\r\n    cur[invoiceCurrency] = convertedRate;\r\n    const curRate = new Currency({\r\n      base: homeCurrency,\r\n      date: expenseDate,\r\n      rate: cur\r\n    });\r\n    return {curRate, convertedRate};\r\n  } catch (err) {\r\n    throw new Error(err);\r\n}\r\n}\r\n\r\nasync function updateExpense(expenseId, expenseAmount, expenseDate, convertedRate, rateObjectId) {\r\n  try {\r\n    const amountConverted = Number((expenseAmount / convertedRate).toFixed(2));\r\n    let doc = await Expense.findByIdAndUpdate(expenseId, {\r\n      $set: {\r\n        date: expenseDate,\r\n        curRate: rateObjectId,\r\n        amountConverted: amountConverted\r\n      }\r\n    });\r\n    return doc;\r\n  } catch (err) {\r\n    throw new Error(err);\r\n  }\r\n}\r\n\r\nmodule.exports = async (travel, rates) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    const dateFrom = travel.dateFrom;\r\n    const dateTo = travel.dateTo;\r\n    const travelHomeCurrency = travel.homeCurrency;\r\n    const expenses = travel.expenses;\r\n    const result = []\r\n\r\n    try {\r\n      await expenses.forEach(async (expense) => {\r\n\r\n        if (checkExpenseDate(expense.date, dateFrom, dateTo)) {\r\n          expense.date = setNewExpenseDate(expense.date, dateFrom, dateTo);\r\n\r\n          if (expense.type != 'Mileage') {\r\n            let invoiceCurrency = Object.keys(expense.curRate.rate)[0];\r\n            Currency.find({base: travelHomeCurrency, date: expense.date}, async (err, curRates) => {\r\n              const filertedRatesFromDB = curRates.filter((item) => {\r\n                return !isNaN(item.rate[invoiceCurrency]);\r\n              });\r\n              if (filertedRatesFromDB.length === 0) {\r\n                const {curRate, convertedRate} = await createNewCurrency(expense.date, travelHomeCurrency, invoiceCurrency);\r\n                await curRate.save();\r\n                const rateObjectId = curRate._id\r\n                await updateExpense(expense._id, expense.amount, expense.date, convertedRate, rateObjectId).then((doc) => {\r\n                  result.push(doc);\r\n                  if (result.length === expenses.length) {\r\n                    resolve(result);\r\n                  }\r\n                });\r\n              } else {\r\n                const convertedRate = filertedRatesFromDB[0].rate[invoiceCurrency];\r\n                const rateObjectId = filertedRatesFromDB[0]._id\r\n                await updateExpense(expense._id, expense.amount, expense.date, convertedRate, rateObjectId).then((doc) => {\r\n                  result.push(doc);\r\n                  if (result.length === expenses.length) {\r\n                    resolve(result);\r\n                  }\r\n                });\r\n              }\r\n            });\r\n          } else {\r\n            let doc = await expense.save((doc) => {\r\n              result.push(doc);\r\n              if (result.length === expenses.length) {\r\n                resolve(result);\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          result.push(expense);\r\n          if (result.length === expenses.length) {\r\n            resolve(result);\r\n          }\r\n        }\r\n      });\r\n    } catch (err) {\r\n      reject (new Error(err));\r\n    }\r\n  });\r\n\r\n}\r\n","const Rate = require('../models/Rate');\r\n\r\nconst convertRateToHomeCurrencyRate = (rates, homeCurrency, invoiceCurrency) => {\r\n  homeCurrency = homeCurrency.toUpperCase();\r\n  invoiceCurrency = invoiceCurrency.toUpperCase();\r\n  const homeCurrencyRate = rates[homeCurrency];\r\n  const convertedRate = 1 / homeCurrencyRate;\r\n  const baseRate = rates[invoiceCurrency];\r\n  const invoiceRate = Number((baseRate * convertedRate).toFixed(2));\r\n  return invoiceRate;\r\n}\r\n\r\nconst findRatesByExactOrClosestDate = async (date = new Date()) => {\r\n  try {\r\n    const exactDate = await Rate.find({date: date}, (err, items) => {\r\n      return items;\r\n    });\r\n    if (exactDate.length === 1) {\r\n      return exactDate[0];\r\n    }\r\n\r\n    const greaterDate = await Rate.findOne({date: {$gt: date}}, (err, item) => {\r\n      return item;\r\n    }).sort({date: 1})\r\n\r\n    const lowerDate = await Rate.findOne({date: {$lt: date}}, (err, item) => {\r\n      return item;\r\n    }).sort({date: -1})\r\n\r\n    if (greaterDate && lowerDate) {\r\n      const diffGreater = Math.abs(date.getTime() - greaterDate.date.getTime());\r\n      const diffLower = Math.abs(date.getTime() - lowerDate.date.getTime());\r\n\r\n      if (diffGreater < diffLower) {\r\n        return greaterDate;\r\n      } else {\r\n        return lowerDate;\r\n      }\r\n    } else if (!greaterDate && !lowerDate) {\r\n      return 'FUCK!';\r\n    } else if (greaterDate) {\r\n      return greaterDate;\r\n    } else if (lowerDate) {\r\n      return lowerDate;\r\n    } else {\r\n      return 'FUCK AGAIN!';\r\n    }\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n}\r\n\r\nconst toTitleCase = (str) => {\r\n  return str.replace(/\\w\\S*/g,\r\n    txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\r\n};\r\n\r\nString.prototype.splice = function(idx, rem, str) {\r\n    return this.slice(0, idx) + str + this.slice(idx + Math.abs(rem));\r\n};\r\n\r\n/*\r\n * Creates HTML elements\r\n * @param {string} tag\r\n * @param {object} options\r\n * @param {string} text\r\n * @param {boolean} closingTag\r\n */\r\nconst createElement = (tag, options={}, text=\"Hello World\", closingTag=true ) => {\r\n  let tagStart = `<${tag}>`;\r\n  let tagEnd = `</${tag}>`;\r\n  let attrs = ''\r\n  let result = '';\r\n  const insertIndex = tagStart.length - 1;\r\n  const attrArray = [\" \"];\r\n  for (let [attr, val] of Object.entries(options)) {\r\n    attr = attr.replace(/_/g, '-');\r\n    const arr = [];\r\n    if (val instanceof Array) {\r\n      val.forEach((val1) => {\r\n        let val2 = `${val1} `\r\n        arr.push(val2);\r\n      });\r\n    } else {\r\n      arr.push(val);\r\n    }\r\n    let rAttr = arr.join('');\r\n    let lAttr = `${attr}=\"${rAttr}\"`\r\n    attrArray.push(lAttr);\r\n}\r\n  attrs = attrArray.join(' ');\r\n  tagStart = tagStart.splice(insertIndex, 0, attrs);\r\n  if (closingTag) {\r\n    result = tagStart + text + tagEnd;\r\n  } else {\r\n    result = tagStart + text;\r\n  }\r\n  return result;\r\n};\r\n\r\n/*\r\n * Returns 2 HTML elements as one string\r\n */\r\nconst createTwoCardElements = (tagArr, optionArr, textArr=['', ''], closingArr=[true, true, true], insert = '') => {\r\n\r\n  const labelText = createElement(tagArr[0], optionArr[0], textArr[0], closingArr[0]);\r\n  const labelElem = createElement(tagArr[1], optionArr[1], labelText, closingArr[1]);\r\n  const expenseElem = createElement(tagArr[2], optionArr[2], textArr[1], closingArr[2]);\r\n  return labelElem + insert + expenseElem;\r\n};\r\n\r\nconst createOptions = (options, selected, elemAttrs={}, valueToLowerCase = false) => {\r\n  let result = '';\r\n  selected = (!selected) ? '' : selected;\r\n  options.forEach((val) => {\r\n    // console.log(val);\r\n    const optionVal = (valueToLowerCase) ? val.toLowerCase() : val;\r\n    // console.log(optionVal, val, selected);\r\n    elemAttrs.value = optionVal;\r\n    if (optionVal.toLowerCase() === selected.toLowerCase()) {\r\n      elemAttrs.selected = 'selected';\r\n    };\r\n    const htmlElem = createElement('option', elemAttrs, val);\r\n    if (elemAttrs.selected) {\r\n      delete elemAttrs.selected;\r\n    }\r\n    result = result + htmlElem;\r\n  });\r\n  delete elemAttrs.value;\r\n  return result;\r\n}\r\n\r\nmodule.exports = {\r\n  convertRateToHomeCurrencyRate,\r\n  findRatesByExactOrClosestDate,\r\n  toTitleCase,\r\n  createElement,\r\n  createTwoCardElements,\r\n  createOptions\r\n}\r\n","module.exports = require(\"@babel/polyfill\");","module.exports = require(\"axios\");","module.exports = require(\"bcrypt-nodejs\");","module.exports = require(\"body-parser\");","module.exports = require(\"chalk\");","module.exports = require(\"compression\");","module.exports = require(\"connect-mongo\");","module.exports = require(\"crypto\");","module.exports = require(\"dotenv\");","module.exports = require(\"errorhandler\");","module.exports = require(\"express\");","module.exports = require(\"express-flash\");","module.exports = require(\"express-formidable\");","module.exports = require(\"express-hbs\");","module.exports = require(\"express-session\");","module.exports = require(\"express-validator\");","module.exports = require(\"fs\");","module.exports = require(\"full-icu\");","module.exports = require(\"lodash\");","module.exports = require(\"lusca\");","module.exports = require(\"method-override\");","module.exports = require(\"moment\");","module.exports = require(\"mongoose\");","module.exports = require(\"morgan\");","module.exports = require(\"multer\");","module.exports = require(\"node-mailjet\");","module.exports = require(\"node-sass-middleware\");","module.exports = require(\"node-schedule\");","module.exports = require(\"nodemailer\");","module.exports = require(\"papaparse\");","module.exports = require(\"passport\");","module.exports = require(\"passport-google-oauth\");","module.exports = require(\"passport-local\");","module.exports = require(\"passport-oauth\");","module.exports = require(\"path\");","module.exports = require(\"pdfmake\");","module.exports = require(\"request\");","module.exports = require(\"util\");"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AClFA;AACA;AACA;AAAA;;;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;AAGA;;;;;AAIA;AACA;AACA;AACA;AAGA;;;;AAGA;AAAA;AAAA;AAEA;;;;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;AAGA;AAEA;;;;;AAGA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AAEA;;;;;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAGA;AAAA;AACA;AAPA;AAEA;AAKA;AACA;AARA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAMA;AACA;AAAA;AAAA;AAFA;AACA;AANA;AAKA;AALA;AAAA;AAUA;AADA;AACA;AAVA;AASA;AATA;AAAA;AAaA;AACA;AACA;AACA;AACA;AAjBA;AAYA;AACA;AAbA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AAxBA;AAmBA;AACA;AApBA;AAyBA;AACA;AACA;AA3BA;AAAA;AACA;AADA;AAAA;AAAA;AA6BA;AACA;AA9BA;AAAA;AAAA;AACA;AADA;AAgCA;AACA;AAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCA;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAFA;AACA;AAJA;AAGA;AAHA;AAAA;AAQA;AACA;AACA;AACA;AACA;AAZA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAeA;AACA;AACA;AACA;AACA;AAnBA;AAcA;AACA;AAfA;AAoBA;AACA;AACA;AAtBA;AAAA;AACA;AADA;AAAA;AAAA;AAwBA;AACA;AAzBA;AAAA;AAAA;AACA;AADA;AA2BA;AACA;AA5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;;;;;;AAKA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA,SAkBA;AAEA;;;;;AAGA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACjYA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;AAKA;AACA;AACA;AAEA;;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AAeA;;;;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvJA;AACA;AACA;AAAA;AACA;AAMA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AADA;AAFA;AAAA;AAAA;AACA;AADA;AAAA;AAoBA;AADA;AACA;AApBA;AAAA;AAAA;AAwBA;AAEA;AACA;AADA;AA1BA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgCA;AAEA;AACA;AAGA;;;;;;;;;;;ACxFA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAGA;;;;;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwBA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA;AAAA;AAAA;AAAA;AACA;AAuCA;AAxCA;AACA;AADA;AA6CA;AACA;AACA;AACA;AAhDA;AAAA;AAAA;AAAA;AACA;AAiDA;AACA;AACA;AACA;AAEA;AACA;AAxDA;AAAA;AAyDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAAA;AAWA;AACA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA1DA;AAyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhFA;AAAA;AACA;AADA;AAkFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA1FA;AAAA;AAAA;AA+FA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AA1GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6GA;;;;;AAGA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AACA;AAoCA;AArCA;AACA;AADA;AAyCA;AACA;AAEA;AACA;AACA;AA9CA;AAAA;AAAA;AAAA;AACA;AAgDA;AACA;AACA;AACA;AAEA;AACA;AAvDA;AAAA;AAwDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AAHA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAzDA;AAqEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AArEA;AAAA;AACA;AADA;AAkFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAnFA;AAAA;AAAA;AAAA;AACA;AADA;AA+FA;AA/FA;AAAA;AAiGA;AAAA;AAAA;AADA;AAEA;AACA;AACA;AACA;AACA;AAtGA;AAgGA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAoHA;AAAA;AAAA;AACA;AACA;AAtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACjMA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACxBA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;;;;AAIA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAQA;AACA;AACA;AAVA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAiBA;AACA;AAlBA;AAAA;AAAA;AAAA;AACA;AAkBA;AACA;AApBA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAyBA;AACA;AACA;AACA;AACA;AA7BA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAiCA;AACA;AACA;AAnCA;AAgCA;AAhCA;AAAA;AACA;AADA;AAmCA;AACA;AACA;AArCA;AAAA;AAuCA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAGA;AACA;AAWA;AACA;AACA;AACA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxCA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAiEA;AACA;AACA;AAnEA;AAgEA;AACA;AAjEA;AAAA;AAAA;AAAA;AAAA;AACA;AAqEA;AACA;AAvEA;AACA;AADA;AA2EA;AACA;AACA;AADA;AAGA;AA/EA;AAAA;AACA;AADA;AAAA;AAAA;AAiFA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AA7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACrCA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAhBA;AAAA;AAoBA;AACA;AADA;AADA;AAKA;AACA;AADA;AAAA;AAMA;AACA;AA/BA;AAiBA;AAcA;AACA;AAhCA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAkCA;AAAA;AACA;AAnCA;AAkCA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AA7CA;AAAA;AACA;AADA;AAgDA;AACA;AAjDA;AAAA;AAmDA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AACA;AAnDA;AAkDA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8EA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AADA;AADA;AADA;AASA;AACA;AADA;AADA;AACA;AAXA;AACA;AAeA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAXA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AApDA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAqDA;AACA;AAtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyDA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AAaA;AAdA;AACA;AADA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AApBA;AAAA;AAAA;AACA;AADA;AA8BA;AA9BA;AAAA;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAhCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAkCA;AAAA;AAAA;AACA;AACA;AApCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsCA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAGA;AAHA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AACA;AAPA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AATA;AACA;AADA;AAaA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AArBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBA;;;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AACA;AAqBA;AAtBA;AACA;AADA;AA0BA;AACA;AACA;AA5BA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAkCA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AArCA;AAiCA;AACA;AAlCA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAuCA;;;;;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAzDA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACxTA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAIA;AAEA;;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AARA;AAWA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AAEA;;;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AADA;AAIA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAEA;;;;;;AAKA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AALA;AAKA;AAAA;AACA;AAAA;AAAA;AAlBA;AACA;AAmBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AADA;AAcA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AACA;AAEA;;;;;;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AAGA;AAEA;;;;;;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAZA;AACA;AAaA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAVA;AADA;AAmBA;AAGA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;;;;;;;;;;;AChdA;;;;;;;AAQA;AACA;AACA;AACA;AAOA;AAVA;;;;;;;;;;;ACRA;AAWA;AA2HA;AAgBA;AACA;AACA;AACA;AAHA;;;;;;;;;;;ACtJA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AATA;AAcA;AADA;AAIA;AAEA;;;;;;;;;;;ACnCA;;;;;;;;;;;;;AAaA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAnCA;AAwCA;AAAA;AAEA;AAEA;;;;;;;;;;;AChEA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAGA;;;;;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;;;;;;;;;;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;;ACnDA;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AA9BA;AAmCA;AACA;AAFA;AAIA;;;;;;;;;;;AAUA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AADA;AADA;AAKA;AACA;AADA;AADA;AAKA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAlBA;AADA;AAwBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AADA;AAhBA;AADA;AAsBA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AADA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AARA;AADA;AAaA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AALA;AADA;AAWA;AACA;AACA;AAEA;;;;;;;;;;;AC3LA;;;;;;;;;;;;;;;;;AAkBA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAnCA;AAuCA;AAAA;AAEA;;;;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;AAGA;AACA;AACA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;AChHA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;;;;;;;;;;;;;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AAJA;AAAA;AAMA;AACA;AACA;AARA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;;;;;;;;;AASA;;;;;;;;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAGA;AAAA;AACA;AAJA;AAGA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;;;;;;;;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;ACvcA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;AAKA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AACA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AACA;AAHA;AACA;AAKA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACl3BA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AACA;;AANA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AACA;;AANA;AACA;AAOA;AACA;;;;;;;;;;;;;;;;;;;AClBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAkeA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAkBA;AACA;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AALA;AAOA;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAGA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAZA;AAEA;AAFA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AAAA;AAAA;AACA;AAvBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;;;;;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAMA;AANA;AACA;AADA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AAlBA;AAeA;AACA;AAhBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAqBA;AACA;AACA;AACA;AAEA;AA1BA;AAAA;AA4BA;AACA;AACA;AA9BA;AA2BA;AACA;AA5BA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqCA;;;;;;;AAKA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAKA;AACA;AAEA;AARA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;AAkBA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AA5BA;AAiBA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAVA;AA8CA;AA9CA;AAAA;AAAA;AAAA;AACA;AA8CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAnDA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAqDA;AACA;AACA;AACA;AAAA;AACA;AACA;AA1DA;AAoDA;AAOA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAAA;AAMA;AACA;AACA;AACA;AArEA;AAuEA;AAAA;AAAA;AACA;AAxEA;AAAA;AAAA;AAyEA;AAzEA;AA0EA;AAAA;AAAA;AACA;AA3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA6EA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAKA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAPA;AAIA;AAJA;AAAA;AAUA;AACA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AANA;AAOA;AAAA;AACA;AAjBA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAEA;AAkBA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AAsBA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AALA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAQA;AAAA;AAAA;AACA;AATA;AAAA;AAWA;AACA;AACA;AAbA;AAUA;AAIA;AACA;AAfA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAUA;AACA;AACA;AAZA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAiBA;AAAA;AAAA;AAjBA;AAAA;AAmBA;AACA;AACA;AADA;AADA;AADA;AAOA;AACA;AACA;AA3BA;AA4BA;AACA;AA7BA;AAAA;AACA;AADA;AAAA;AAAA;AA+BA;AAAA;AAAA;AAAA;AACA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAqCA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;AClWA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAPA;AASA;AACA;AACA;AAdA;AALA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAEA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AADA;AAcA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAYA;AAfA;AAiBA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AApBA;AAtEA;AAiGA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC7PA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAPA;AAeA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AACA;AACA;AAfA;AAJA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAAA;AAEA;AAHA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAHA;AADA;AAcA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAYA;AAdA;AAgBA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AApBA;AArEA;AAgGA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACvQA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AANA;AAWA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AAHA;AADA;AACA;AAJA;AAGA;AAHA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAKA;AAAA;AALA;AAAA;AACA;AADA;AAOA;AAPA;AAAA;AASA;AACA;AAAA;AACA;AACA;AACA;AACA;AAdA;AAAA;AAAA;AACA;AADA;AAeA;AACA;AAhBA;AAAA;AAkBA;AACA;AAAA;AACA;AACA;AACA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAAA;AACA;AADA;AAAA;AAAA;AAkCA;AACA;AAAA;AACA;AACA;AACA;AACA;AAvCA;AAiCA;AACA;AAlCA;AAAA;AAAA;AACA;AADA;AAyCA;AACA;AAAA;AACA;AACA;AACA;AA7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwDA;AACA;AAzDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AALA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AASA;AATA;AAAA;AAaA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAhBA;AAaA;AACA;AAdA;AAAA;AAAA;AAAA;AACA;AAiBA;AACA;AACA;AApBA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuCA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAOA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AApBA;AACA;AAMA;AAAA;AAcA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;;;;;AAGA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;;;;;;;;;;;;;;;;;;;;;;;;ACpsourceRoot":""}