{{!< layout}}

 <div>
    <div class="disclaimer">
    <h2>DISCLAIMER</h2>
    <h3>You are free to use this app but <strong>I don't guarantee that this app will be maintained!</strong>I don't guarantee that this app will be maintained!</h3>
    <p>This was build for my friend and it is basically my first project.</p>

    </div>
  </div>

{{#if user}}
  {{> travelsHeader}}
  <hr>

  <h2>Login or Sign up

  </h2>
  <div class="row">
    <div class="col-xs-6 p-3 mx-auto">
      <div class="">
        <a class="btn btn-dark btn-lg" href="/login">
          Login
        </a>
      </div>
    </div>
    <div class="col-xs-6 p-3 mx-auto">
      <div class="">
        <a class="btn btn-outline-dark btn-lg" href="/signup">
          Sign up
        </a>
      </div>
    </div>
  </div>

{{/if}}

<script type="text/javascript">
  function editExpense (event) {
    console.log(event);
  }
  function toggleTravelButtonText(event) {

    let button;

    if (event.target.localName != "button") {
      button = event.target.parentElement;

      button.click();
      return;
    } else {
      button = event.target;
    }

    let classes = button.getAttribute("class");
    if (button.getAttribute("data-text-swap") == button.innerText) {
      button.innerHTML = button.getAttribute("data-text-original");
      let badge = document.createElement("SPAN");
      let badgeTextNode = document.createTextNode(button.getAttribute("data-text-badge"));

      if (classes.indexOf("badge-light") > 0) {
        badge.setAttribute("class", "badge badge-dark mx-1");
      } else if (classes.indexOf("badge-secondary") > 0) {
        badge.setAttribute("class", "badge badge-warning mx-1");
      } else if (classes.indexOf("badge-dark") > 0) {
        badge.setAttribute("class", "badge badge-light mx-1");
      } else {
        badge.setAttribute("class", "badge badge-danger mx-1");
      }
      badge.appendChild(badgeTextNode);
      button.appendChild(badge);
      let sr = document.createElement("SPAN");
      let srTextNode = document.createTextNode(button.getAttribute("data-text-badge-sr"));
      sr.setAttribute("class", "sr-only");
      sr.appendChild(srTextNode);
      button.appendChild(sr);
    } else {

      button.innerHTML = button.getAttribute("data-text-swap");
    }
  }
  function invoiceUnitChange(event) {
    console.log('event', event);
    console.log('target', event.target);
    console.log('id', event.target.attributes['id']);
    const expenseId = event.target.attributes['id'].value.replace('invoiceUnit', '');
    const aDistanceRowId = `amountDistanceRow${expenseId}`;
    const aDistanceRow2Id = `amountDistance2Row${expenseId}`;
    const aDistanceElem = document.getElementById(`amountDistance${expenseId}`);
    const aDistance2Elem = document.getElementById(`amountDistance2${expenseId}`);
    console.log(aDistance2Elem);

    aDistance2Elem.readOnly = !aDistance2Elem.readOnly;
    aDistanceElem.readOnly = !aDistanceElem.readOnly;

    if (!aDistance2Elem.readOnly) {
      aDistance2Elem.value = aDistanceElem.value * {{constants.MILES_TO_KILOMETERS}};
      aDistance2Elem.value = parseFloat($(`#amountDistance2${expenseId}`).val()).toFixed(2);
      console.log(aDistanceElem.value);
      console.log(aDistance2Elem.value);
      $(`#${aDistanceRow2Id}`).show();
    } else {
      aDistanceElem.value = aDistance2Elem.value * {{constants.KILOMETERS_TO_MILES}};
      aDistanceElem.value = parseFloat($(`#amountDistance${expenseId}`).val()).toFixed(2);
      console.log(aDistanceElem.value);
      console.log(aDistance2Elem.value);
      $(`#${aDistanceRow2Id}`).hide();
    }

  }
  $(document).ready(() => {

  });
</script>
