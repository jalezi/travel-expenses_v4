{{!< layout}}

<div class="pb-2 mt-2 mb-4 border-bottom">
  <h3> {{{travel.description}}}
    <button class="btn btn-primary float-right" type="button" data-toggle="collapse" data-target="#updateTravelForm" aria-expanded="false" aria-controls="updateTravelForm">
      <i class="fas fa-pen"></i>Update
    </button>
  </h3>
</div>

{{> travelUpdateForm }}

<div class="pb-2 mt-2 mb-4">
  <h6>
    <button class="btn btn-success" type="button" data-toggle="collapse" data-target="#newExpenseForm" aria-expanded="false" aria-controls="newExpenseForm">
      <i class="fas fa-plus"></i>New expense
    </button>
  </h6>

</div>

<div class="collapse pb-2 mt-2 mb-4 border-bottom" id="newExpenseForm">
  <form class="" action="/travels/{{travel._id}}/expenses/new" method="POST">
    <input type="hidden" name="_csrf" value={{_csrf}} />
    <div class="form-group row">
      <div class="col-md-3">
        <label class="col-form-label font-weight-bold" for="expenseType">Type</label>
        <select class="form-control" id="expenseType" name="expenseType" autofocus="autofocus" autocomplete="expenseType" required="required">
          {{#each expenseTypes}}
            <option value="{{this}}">{{this}}</option>
          {{/each}}
        </select>
      </div>
      <div class="col-md-5">
        <label class="col-form-label font-weight-bold" for="expenseDescription">Description</label>
        <input class="form-control" id="expenseDescription" type="expenseDescription" value="" name="expenseDescription" placeholder="Description" autofocus="autofocus" autocomplete="expenseDescription" required="required" />
      </div>
      <div class="col-md-4">
        <label class="col-form-label font-weight-bold" for="invoiceDate" >Invoice date</label>
        <input class="form-control" id="invoiceDate" type="date" min={{formatDate travel.dateFrom}} max={{formatDate travel.dateTo}} value={{formatDate travel.dateFrom}} name="invoiceDate" autocomplete="invoiceDate" required="required" />
      </div>
    </div>

    {{> newExpenseFormRow2NotMileage}}
    {{> newExpenseFormRow2Mileage}}

    <div class="form-group row ">
      <div class="col-md-7">
        <button class="btn btn-success col-md-4 mb-1" type="submit"><i class="fas fa-plus"></i>Add</button>
        <button class="btn btn-outline-primary col-md-4 mb-1" type="button" data-toggle="collapse" data-target="#newExpenseForm" aria-expanded="false" aria-controls="newExpenseForm"><i class="fas fa-ban"></i>Cancel</button>
      </div>
    </div>
  </form>
</div>

<table class="table table-hover table-bordered">
  <thead>
    <tr class="text-center">
      <th scope="col">#</th>
      <th scope="col">Type</th>
      <th scope="col">Description</th>
      <th scope="col">Inovice date</th>

      <th scope="col">Amount</th>
      <th scope="col">Currency/Unit</th>
      <th scope="col">Rate</th>
      <th scope="col">Amount '{{user.homeCurrency}}'</th>
    </tr>
  </thead>

  <tbody>
    {{#each expenses}}
    <tr>
      <th scope="row" class="text-center">{{countList @index}}</th>
        <td class="text-center">{{this.type}}</td>
        <td><a href="/travels/{{travel._id}}/{{this._id}}">{{this.description}}</a></td>
        <td class="text-center">{{formatDate this.date}}</td>

        <td class="text-right">{{this.amount}}</td>
        <td class="text-right">{{this.currency}}</td>
        <td class="text-right"></td>
        <td class="text-right">{{this.amountConverted}}</td>
      {{/each}}
    </tr>
  </tbody>
</table>

<script >


  $(document).ready(() => {
    invoiceUnit.onchange = () => {
        document.getElementById('amountDistance2').readOnly = !document.getElementById('amountDistance2').readOnly;
        document.getElementById('amountDistance').readOnly = !document.getElementById('amountDistance').readOnly;
        if (!document.getElementById('amountDistance2').readOnly) {
          $('#row3Mileage').show();
        } else {
          $('#row3Mileage').hide();
        }
    }

    amountDistance2.onchange = (event) => {
      if (invoiceUnit.value === 'km') {
        const kmToMiles = parseFloat({{constants.KILOMETERS_TO_MILES}});
        const miles = (amountDistance2.value * kmToMiles).toFixed(2);
        // console.log(miles);
        amountDistance.value = miles;
        const convertedAmount = (travelPerMileAmount.value * amountDistance.value).toFixed(2);
        amountConverted2.value = convertedAmount;
      }
    }

      // to be moved somewhere else because of api key
    invoiceCurrency.onchange = async function () {
        if (invoiceCurrency.value.length === 3) {
            try {
              await $.get("http://data.fixer.io/api/latest?access_key=de6c63dc42df031c4ecd8fe60abd3e34", function(response)  {
                const from = response.rates[invoiceCurrency.value];
                if (from != "undefined") {
                  const home = response.rates['{{user.homeCurrency}}'];
                  const rateValue = (from / home);
                  if (rateValue != "") {
                    rate.value = rateValue;
                    rate.value = parseFloat($('#rate').val()).toFixed(2)
                  }
                } else {
                  throw new Error(`No rate for ${invoiceCurrency.value}`)
                }
            });
          } catch (err) {
            // console.log("something wrong");
            throw new Error('Something went wrong', err);
          }
        }
    }
  })
</script>
